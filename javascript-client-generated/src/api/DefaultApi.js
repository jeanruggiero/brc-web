/*
 * BRC API
 * This is an API that allows access to Boealps BRC course and participant data.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jeanruggiero@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/Gear', 'model/GradClimbReview', 'model/Homework', 'model/InstructorReview', 'model/LeavenworthReview', 'model/Lecture', 'model/Outing', 'model/SkillsNightReview', 'model/Squamish1Review', 'model/Squamish2Review', 'model/Student', 'model/Update'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/Gear'), require('../model/GradClimbReview'), require('../model/Homework'), require('../model/InstructorReview'), require('../model/LeavenworthReview'), require('../model/Lecture'), require('../model/Outing'), require('../model/SkillsNightReview'), require('../model/Squamish1Review'), require('../model/Squamish2Review'), require('../model/Student'), require('../model/Update'));
  } else {
    // Browser globals (root is window)
    if (!root.BrcApi) {
      root.BrcApi = {};
    }
    root.BrcApi.DefaultApi = factory(root.BrcApi.ApiClient, root.BrcApi.Gear, root.BrcApi.GradClimbReview, root.BrcApi.Homework, root.BrcApi.InstructorReview, root.BrcApi.LeavenworthReview, root.BrcApi.Lecture, root.BrcApi.Outing, root.BrcApi.SkillsNightReview, root.BrcApi.Squamish1Review, root.BrcApi.Squamish2Review, root.BrcApi.Student, root.BrcApi.Update);
  }
}(this, function(ApiClient, Gear, GradClimbReview, Homework, InstructorReview, LeavenworthReview, Lecture, Outing, SkillsNightReview, Squamish1Review, Squamish2Review, Student, Update) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the gearGet operation.
     * @callback module:api/DefaultApi~gearGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Gear>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns a list of all gear
     * Returns a list of all gear.
     * @param {module:api/DefaultApi~gearGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Gear>}
     */
    this.gearGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Gear];

      return this.apiClient.callApi(
        '/gear', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the homeworkGet operation.
     * @callback module:api/DefaultApi~homeworkGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Homework>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns a list of homework matching the criteria
     * Returns a list of homework matching the search criteria. If no search parameters are provided, all homework objects are returned.
     * @param {Object} opts Optional parameters
     * @param {String} opts.dueAfter return all homework objects due after the specified date
     * @param {String} opts.dueBefore return all homework objects due before the specified date
     * @param {module:api/DefaultApi~homeworkGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Homework>}
     */
    this.homeworkGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'dueAfter': opts['dueAfter'],
        'dueBefore': opts['dueBefore'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Homework];

      return this.apiClient.callApi(
        '/homework', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the meetingsLecturesGet operation.
     * @callback module:api/DefaultApi~meetingsLecturesGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Lecture>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns a list of lectures matching the criteria
     * Returns a list of lectures matching the search criteria. If no search parameters are provided, all lectures are returned.
     * @param {Object} opts Optional parameters
     * @param {String} opts.occursAfter return all lectures occurring after the specified date
     * @param {String} opts.occursBefore return all lectures occurring before the specified date
     * @param {module:api/DefaultApi~meetingsLecturesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Lecture>}
     */
    this.meetingsLecturesGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'occursAfter': opts['occursAfter'],
        'occursBefore': opts['occursBefore'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Lecture];

      return this.apiClient.callApi(
        '/meetings/lectures', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the meetingsOutingsGet operation.
     * @callback module:api/DefaultApi~meetingsOutingsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Outing>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns a list of outings matching the criteria
     * Returns a list of outings matching the search criteria. If no search parameters are provided, all outings are returned.
     * @param {Object} opts Optional parameters
     * @param {String} opts.occursAfter return all outings occurring after the specified date
     * @param {String} opts.occursBefore return all outings occurring before the specified date
     * @param {module:api/DefaultApi~meetingsOutingsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Outing>}
     */
    this.meetingsOutingsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'occursAfter': opts['occursAfter'],
        'occursBefore': opts['occursBefore'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Outing];

      return this.apiClient.callApi(
        '/meetings/outings', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the postsGet operation.
     * @callback module:api/DefaultApi~postsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Update>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns a list of all course updates
     * Returns a list of all course updates.
     * @param {module:api/DefaultApi~postsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Update>}
     */
    this.postsGet = function(callback) {
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Update];

      return this.apiClient.callApi(
        '/posts', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsGradClimbGet operation.
     * @callback module:api/DefaultApi~reviewsGradClimbGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/GradClimbReview>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns a list of grad climb reviews
     * Returns a list of grad climb reviews for the specified student and/or instructor.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.student id of a student
     * @param {Number} opts.instructor id of a Django User of type Instructor
     * @param {module:api/DefaultApi~reviewsGradClimbGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/GradClimbReview>}
     */
    this.reviewsGradClimbGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'student': opts['student'],
        'instructor': opts['instructor'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [GradClimbReview];

      return this.apiClient.callApi(
        '/reviews/grad_climb', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsGradClimbIdGet operation.
     * @callback module:api/DefaultApi~reviewsGradClimbIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the grad climb review with the specified id
     * Returns the grad climb review with the specified id.
     * @param {Number} id id of review to get
     * @param {module:api/DefaultApi~reviewsGradClimbIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.reviewsGradClimbIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reviewsGradClimbIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/reviews/grad_climb/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsGradClimbIdPut operation.
     * @callback module:api/DefaultApi~reviewsGradClimbIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates an existing grad climb review
     * Updates an existing review
     * @param {Number} id id of review to update
     * @param {module:model/GradClimbReview} review Review to update
     * @param {module:api/DefaultApi~reviewsGradClimbIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.reviewsGradClimbIdPut = function(id, review, callback) {
      var postBody = review;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reviewsGradClimbIdPut");
      }

      // verify the required parameter 'review' is set
      if (review === undefined || review === null) {
        throw new Error("Missing the required parameter 'review' when calling reviewsGradClimbIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/reviews/grad_climb/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsGradClimbPost operation.
     * @callback module:api/DefaultApi~reviewsGradClimbPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new grad climb review
     * Creates a new review.
     * @param {module:model/GradClimbReview} review Review to add
     * @param {module:api/DefaultApi~reviewsGradClimbPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.reviewsGradClimbPost = function(review, callback) {
      var postBody = review;

      // verify the required parameter 'review' is set
      if (review === undefined || review === null) {
        throw new Error("Missing the required parameter 'review' when calling reviewsGradClimbPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/reviews/grad_climb', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsInstructorReviewGet operation.
     * @callback module:api/DefaultApi~reviewsInstructorReviewGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/InstructorReview>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns a list of instructor reviews matching the criteria
     * Returns a list of instructor reviews for the specified student and/or instructor.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.student id of a student
     * @param {Number} opts.instructor id of a Django User of type Instructor
     * @param {module:api/DefaultApi~reviewsInstructorReviewGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/InstructorReview>}
     */
    this.reviewsInstructorReviewGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'student': opts['student'],
        'instructor': opts['instructor'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [InstructorReview];

      return this.apiClient.callApi(
        '/reviews/instructor_review', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsInstructorReviewIdGet operation.
     * @callback module:api/DefaultApi~reviewsInstructorReviewIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the instructor review with the specified id
     * Returns the instructor review with the specified id.
     * @param {Number} id id of review to get
     * @param {module:api/DefaultApi~reviewsInstructorReviewIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.reviewsInstructorReviewIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reviewsInstructorReviewIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/reviews/instructor_review/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsInstructorReviewIdPut operation.
     * @callback module:api/DefaultApi~reviewsInstructorReviewIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates an existing instructor review
     * Updates an existing review
     * @param {Number} id id of review to update
     * @param {module:model/InstructorReview} review Review to update
     * @param {module:api/DefaultApi~reviewsInstructorReviewIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.reviewsInstructorReviewIdPut = function(id, review, callback) {
      var postBody = review;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reviewsInstructorReviewIdPut");
      }

      // verify the required parameter 'review' is set
      if (review === undefined || review === null) {
        throw new Error("Missing the required parameter 'review' when calling reviewsInstructorReviewIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/reviews/instructor_review/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsInstructorReviewPost operation.
     * @callback module:api/DefaultApi~reviewsInstructorReviewPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new instructor review
     * Creates a new review.
     * @param {module:model/InstructorReview} review Review to add
     * @param {module:api/DefaultApi~reviewsInstructorReviewPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.reviewsInstructorReviewPost = function(review, callback) {
      var postBody = review;

      // verify the required parameter 'review' is set
      if (review === undefined || review === null) {
        throw new Error("Missing the required parameter 'review' when calling reviewsInstructorReviewPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/reviews/instructor_review', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsLeavenworthGet operation.
     * @callback module:api/DefaultApi~reviewsLeavenworthGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/LeavenworthReview>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns a list of leavenworth reviews matching the criteria
     * Returns a list of leavenworth reviews for the specified student and/or instructor.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.student id of a student
     * @param {Number} opts.instructor id of a Django User of type Instructor
     * @param {module:api/DefaultApi~reviewsLeavenworthGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/LeavenworthReview>}
     */
    this.reviewsLeavenworthGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'student': opts['student'],
        'instructor': opts['instructor'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [LeavenworthReview];

      return this.apiClient.callApi(
        '/reviews/leavenworth', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsLeavenworthIdGet operation.
     * @callback module:api/DefaultApi~reviewsLeavenworthIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the leavenworth review with specified id
     * Returns the leavenworth review with the specified id.
     * @param {Number} id id of review to retrieve
     * @param {module:api/DefaultApi~reviewsLeavenworthIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.reviewsLeavenworthIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reviewsLeavenworthIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/reviews/leavenworth/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsLeavenworthIdPut operation.
     * @callback module:api/DefaultApi~reviewsLeavenworthIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates an existing leavenworth review
     * Updates an existing review.
     * @param {Number} id id of review to update
     * @param {module:model/LeavenworthReview} review Review to update
     * @param {module:api/DefaultApi~reviewsLeavenworthIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.reviewsLeavenworthIdPut = function(id, review, callback) {
      var postBody = review;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reviewsLeavenworthIdPut");
      }

      // verify the required parameter 'review' is set
      if (review === undefined || review === null) {
        throw new Error("Missing the required parameter 'review' when calling reviewsLeavenworthIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/reviews/leavenworth/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsLeavenworthPost operation.
     * @callback module:api/DefaultApi~reviewsLeavenworthPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new leavenworth review
     * Creates a new review.
     * @param {module:model/LeavenworthReview} review Review to add
     * @param {module:api/DefaultApi~reviewsLeavenworthPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.reviewsLeavenworthPost = function(review, callback) {
      var postBody = review;

      // verify the required parameter 'review' is set
      if (review === undefined || review === null) {
        throw new Error("Missing the required parameter 'review' when calling reviewsLeavenworthPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/reviews/leavenworth', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsSkillsNightGet operation.
     * @callback module:api/DefaultApi~reviewsSkillsNightGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/SkillsNightReview>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns a list of skills night reviews matching the criteria
     * Returns a list of skills night reviews for the specified student or instructor.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.student id of a student
     * @param {Number} opts.instructor id of a Django User of type Instructor
     * @param {module:api/DefaultApi~reviewsSkillsNightGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/SkillsNightReview>}
     */
    this.reviewsSkillsNightGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'student': opts['student'],
        'instructor': opts['instructor'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [SkillsNightReview];

      return this.apiClient.callApi(
        '/reviews/skills_night', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsSkillsNightIdGet operation.
     * @callback module:api/DefaultApi~reviewsSkillsNightIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the skills night review with the specified id
     * Returns the skills night review with the specified id.
     * @param {Number} id id of review to retrieve
     * @param {module:api/DefaultApi~reviewsSkillsNightIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.reviewsSkillsNightIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reviewsSkillsNightIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/reviews/skills_night/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsSkillsNightIdPut operation.
     * @callback module:api/DefaultApi~reviewsSkillsNightIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates an existing skills night review
     * Updates an existing review.
     * @param {Number} id id of review to be modified
     * @param {module:model/SkillsNightReview} review Review to update
     * @param {module:api/DefaultApi~reviewsSkillsNightIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.reviewsSkillsNightIdPut = function(id, review, callback) {
      var postBody = review;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reviewsSkillsNightIdPut");
      }

      // verify the required parameter 'review' is set
      if (review === undefined || review === null) {
        throw new Error("Missing the required parameter 'review' when calling reviewsSkillsNightIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/reviews/skills_night/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsSkillsNightPost operation.
     * @callback module:api/DefaultApi~reviewsSkillsNightPostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new skills night review
     * Creates a new review.
     * @param {module:model/SkillsNightReview} review Review to add
     * @param {module:api/DefaultApi~reviewsSkillsNightPostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.reviewsSkillsNightPost = function(review, callback) {
      var postBody = review;

      // verify the required parameter 'review' is set
      if (review === undefined || review === null) {
        throw new Error("Missing the required parameter 'review' when calling reviewsSkillsNightPost");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/reviews/skills_night', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsSquamish1Get operation.
     * @callback module:api/DefaultApi~reviewsSquamish1GetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Squamish1Review>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns a list of squamish1 reviews matching the criteria
     * Returns a list of squamish1 reviews for the specified student and/or instructor.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.student id of a student
     * @param {Number} opts.instructor id of a Django User of type Instructor
     * @param {module:api/DefaultApi~reviewsSquamish1GetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Squamish1Review>}
     */
    this.reviewsSquamish1Get = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'student': opts['student'],
        'instructor': opts['instructor'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Squamish1Review];

      return this.apiClient.callApi(
        '/reviews/squamish1', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsSquamish1IdGet operation.
     * @callback module:api/DefaultApi~reviewsSquamish1IdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the squamish1 review with the specified id
     * Returns the squamish1 review object with the specified id.
     * @param {Number} id id of review to get
     * @param {module:api/DefaultApi~reviewsSquamish1IdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.reviewsSquamish1IdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reviewsSquamish1IdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/reviews/squamish1/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsSquamish1IdPut operation.
     * @callback module:api/DefaultApi~reviewsSquamish1IdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates an existing squamish1 review
     * Updates an existing review.
     * @param {Number} id id of review to update
     * @param {module:model/Squamish1Review} review Review to update
     * @param {module:api/DefaultApi~reviewsSquamish1IdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.reviewsSquamish1IdPut = function(id, review, callback) {
      var postBody = review;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reviewsSquamish1IdPut");
      }

      // verify the required parameter 'review' is set
      if (review === undefined || review === null) {
        throw new Error("Missing the required parameter 'review' when calling reviewsSquamish1IdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/reviews/squamish1/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsSquamish1Post operation.
     * @callback module:api/DefaultApi~reviewsSquamish1PostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new squamish1 review
     * Creates a new review.
     * @param {module:model/Squamish1Review} review Review to add
     * @param {module:api/DefaultApi~reviewsSquamish1PostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.reviewsSquamish1Post = function(review, callback) {
      var postBody = review;

      // verify the required parameter 'review' is set
      if (review === undefined || review === null) {
        throw new Error("Missing the required parameter 'review' when calling reviewsSquamish1Post");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/reviews/squamish1', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsSquamish2Get operation.
     * @callback module:api/DefaultApi~reviewsSquamish2GetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Squamish2Review>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns a list of squamish2 reviews matching the criteria
     * Returns a list of squamish2 reviews for the specified student and/or instructor.
     * @param {Object} opts Optional parameters
     * @param {Number} opts.student id of a student
     * @param {Number} opts.instructor id of a Django User of type Instructor
     * @param {module:api/DefaultApi~reviewsSquamish2GetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Squamish2Review>}
     */
    this.reviewsSquamish2Get = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'student': opts['student'],
        'instructor': opts['instructor'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Squamish2Review];

      return this.apiClient.callApi(
        '/reviews/squamish2', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsSquamish2IdGet operation.
     * @callback module:api/DefaultApi~reviewsSquamish2IdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the squamish2 review with the specified id
     * Returns the squamish2 review object with the specified id.
     * @param {Number} id id of review to retrieve
     * @param {module:api/DefaultApi~reviewsSquamish2IdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.reviewsSquamish2IdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reviewsSquamish2IdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/reviews/squamish2/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsSquamish2IdPut operation.
     * @callback module:api/DefaultApi~reviewsSquamish2IdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates an existing squamish2 review
     * Updates an existing review.
     * @param {Number} id id of review to update
     * @param {module:model/Squamish2Review} review Review to update
     * @param {module:api/DefaultApi~reviewsSquamish2IdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.reviewsSquamish2IdPut = function(id, review, callback) {
      var postBody = review;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling reviewsSquamish2IdPut");
      }

      // verify the required parameter 'review' is set
      if (review === undefined || review === null) {
        throw new Error("Missing the required parameter 'review' when calling reviewsSquamish2IdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/reviews/squamish2/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the reviewsSquamish2Post operation.
     * @callback module:api/DefaultApi~reviewsSquamish2PostCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * creates a new squamish2 review
     * Creates a new review.
     * @param {module:model/Squamish2Review} review Review to add
     * @param {module:api/DefaultApi~reviewsSquamish2PostCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.reviewsSquamish2Post = function(review, callback) {
      var postBody = review;

      // verify the required parameter 'review' is set
      if (review === undefined || review === null) {
        throw new Error("Missing the required parameter 'review' when calling reviewsSquamish2Post");
      }


      var pathParams = {
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = [];
      var returnType = null;

      return this.apiClient.callApi(
        '/reviews/squamish2', 'POST',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the studentsGet operation.
     * @callback module:api/DefaultApi~studentsGetCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Student>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns all students matching criteria
     * When called with no parameters, returns all students.
     * @param {Object} opts Optional parameters
     * @param {String} opts.lastName pass an optional search string for looking up a student by last name
     * @param {String} opts.firstName pass an optional search string for looking up a student by first name
     * @param {module:api/DefaultApi~studentsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<module:model/Student>}
     */
    this.studentsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'lastName': opts['lastName'],
        'firstName': opts['firstName'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = [Student];

      return this.apiClient.callApi(
        '/students', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the studentsIdGet operation.
     * @callback module:api/DefaultApi~studentsIdGetCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * returns the student with the specified id
     * When called with no parameters, returns all students.
     * @param {Number} id id of student to get
     * @param {module:api/DefaultApi~studentsIdGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    this.studentsIdGet = function(id, callback) {
      var postBody = null;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling studentsIdGet");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = [];
      var accepts = ['application/json'];
      var returnType = Object;

      return this.apiClient.callApi(
        '/students/{id}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the studentsIdPut operation.
     * @callback module:api/DefaultApi~studentsIdPutCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * updates an existing student's profile
     * Updates the profile of an existing student.
     * @param {Number} id id of student to get
     * @param {module:model/Student} student Student to update
     * @param {module:api/DefaultApi~studentsIdPutCallback} callback The callback function, accepting three arguments: error, data, response
     */
    this.studentsIdPut = function(id, student, callback) {
      var postBody = student;

      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling studentsIdPut");
      }

      // verify the required parameter 'student' is set
      if (student === undefined || student === null) {
        throw new Error("Missing the required parameter 'student' when calling studentsIdPut");
      }


      var pathParams = {
        'id': id
      };
      var queryParams = {
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = null;

      return this.apiClient.callApi(
        '/students/{id}', 'PUT',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
