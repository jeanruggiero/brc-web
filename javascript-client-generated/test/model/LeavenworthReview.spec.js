/*
 * BRC API
 * This is an API that allows access to Boealps BRC course and participant data.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jeanruggiero@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BrcApi);
  }
}(this, function(expect, BrcApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('LeavenworthReview', function() {
      beforeEach(function() {
        instance = new BrcApi.LeavenworthReview();
      });

      it('should create an instance of LeavenworthReview', function() {
        // TODO: update the code to test LeavenworthReview
        expect(instance).to.be.a(BrcApi.LeavenworthReview);
      });

      it('should have the property student (base name: "student")', function() {
        // TODO: update the code to test the property student
        expect(instance).to.have.property('student');
        // expect(instance.student).to.be(expectedValueLiteral);
      });

      it('should have the property instructor (base name: "instructor")', function() {
        // TODO: update the code to test the property instructor
        expect(instance).to.have.property('instructor');
        // expect(instance.instructor).to.be(expectedValueLiteral);
      });

      it('should have the property time (base name: "time")', function() {
        // TODO: update the code to test the property time
        expect(instance).to.have.property('time');
        // expect(instance.time).to.be(expectedValueLiteral);
      });

      it('should have the property outing (base name: "outing")', function() {
        // TODO: update the code to test the property outing
        expect(instance).to.have.property('outing');
        // expect(instance.outing).to.be(expectedValueLiteral);
      });

      it('should have the property knots (base name: "knots")', function() {
        // TODO: update the code to test the property knots
        expect(instance).to.have.property('knots');
        // expect(instance.knots).to.be(expectedValueLiteral);
      });

      it('should have the property belay (base name: "belay")', function() {
        // TODO: update the code to test the property belay
        expect(instance).to.have.property('belay');
        // expect(instance.belay).to.be(expectedValueLiteral);
      });

      it('should have the property rappel (base name: "rappel")', function() {
        // TODO: update the code to test the property rappel
        expect(instance).to.have.property('rappel');
        // expect(instance.rappel).to.be(expectedValueLiteral);
      });

      it('should have the property systems (base name: "systems")', function() {
        // TODO: update the code to test the property systems
        expect(instance).to.have.property('systems');
        // expect(instance.systems).to.be(expectedValueLiteral);
      });

      it('should have the property anchorSafety (base name: "anchor_safety")', function() {
        // TODO: update the code to test the property anchorSafety
        expect(instance).to.have.property('anchorSafety');
        // expect(instance.anchorSafety).to.be(expectedValueLiteral);
      });

      it('should have the property gearPlacement (base name: "gear_placement")', function() {
        // TODO: update the code to test the property gearPlacement
        expect(instance).to.have.property('gearPlacement');
        // expect(instance.gearPlacement).to.be(expectedValueLiteral);
      });

      it('should have the property anchorBuilding (base name: "anchor_building")', function() {
        // TODO: update the code to test the property anchorBuilding
        expect(instance).to.have.property('anchorBuilding');
        // expect(instance.anchorBuilding).to.be(expectedValueLiteral);
      });

      it('should have the property safety (base name: "safety")', function() {
        // TODO: update the code to test the property safety
        expect(instance).to.have.property('safety');
        // expect(instance.safety).to.be(expectedValueLiteral);
      });

      it('should have the property efficiency (base name: "efficiency")', function() {
        // TODO: update the code to test the property efficiency
        expect(instance).to.have.property('efficiency');
        // expect(instance.efficiency).to.be(expectedValueLiteral);
      });

      it('should have the property gearCleaning (base name: "gear_cleaning")', function() {
        // TODO: update the code to test the property gearCleaning
        expect(instance).to.have.property('gearCleaning');
        // expect(instance.gearCleaning).to.be(expectedValueLiteral);
      });

      it('should have the property technique (base name: "technique")', function() {
        // TODO: update the code to test the property technique
        expect(instance).to.have.property('technique');
        // expect(instance.technique).to.be(expectedValueLiteral);
      });

      it('should have the property routefinding (base name: "routefinding")', function() {
        // TODO: update the code to test the property routefinding
        expect(instance).to.have.property('routefinding');
        // expect(instance.routefinding).to.be(expectedValueLiteral);
      });

      it('should have the property areas (base name: "areas")', function() {
        // TODO: update the code to test the property areas
        expect(instance).to.have.property('areas');
        // expect(instance.areas).to.be(expectedValueLiteral);
      });

      it('should have the property currentComfortGrade (base name: "current_comfort_grade")', function() {
        // TODO: update the code to test the property currentComfortGrade
        expect(instance).to.have.property('currentComfortGrade');
        // expect(instance.currentComfortGrade).to.be(expectedValueLiteral);
      });

      it('should have the property currentLimitGrade (base name: "current_limit_grade")', function() {
        // TODO: update the code to test the property currentLimitGrade
        expect(instance).to.have.property('currentLimitGrade');
        // expect(instance.currentLimitGrade).to.be(expectedValueLiteral);
      });

      it('should have the property recommendation (base name: "recommendation")', function() {
        // TODO: update the code to test the property recommendation
        expect(instance).to.have.property('recommendation');
        // expect(instance.recommendation).to.be(expectedValueLiteral);
      });

      it('should have the property comments (base name: "comments")', function() {
        // TODO: update the code to test the property comments
        expect(instance).to.have.property('comments');
        // expect(instance.comments).to.be(expectedValueLiteral);
      });

      it('should have the property leavenworthCleanAndRappelBolts (base name: "leavenworth_clean_and_rappel_bolts")', function() {
        // TODO: update the code to test the property leavenworthCleanAndRappelBolts
        expect(instance).to.have.property('leavenworthCleanAndRappelBolts');
        // expect(instance.leavenworthCleanAndRappelBolts).to.be(expectedValueLiteral);
      });

      it('should have the property guideMode (base name: "guide_mode")', function() {
        // TODO: update the code to test the property guideMode
        expect(instance).to.have.property('guideMode');
        // expect(instance.guideMode).to.be(expectedValueLiteral);
      });

    });
  });

}));
