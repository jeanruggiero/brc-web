/*
 * BRC API
 * This is an API that allows access to Boealps BRC course and participant data.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jeanruggiero@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BrcApi);
  }
}(this, function(expect, BrcApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('Student', function() {
      beforeEach(function() {
        instance = new BrcApi.Student();
      });

      it('should create an instance of Student', function() {
        // TODO: update the code to test Student
        expect(instance).to.be.a(BrcApi.Student);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property lastName (base name: "lastName")', function() {
        // TODO: update the code to test the property lastName
        expect(instance).to.have.property('lastName');
        // expect(instance.lastName).to.be(expectedValueLiteral);
      });

      it('should have the property firstName (base name: "firstName")', function() {
        // TODO: update the code to test the property firstName
        expect(instance).to.have.property('firstName');
        // expect(instance.firstName).to.be(expectedValueLiteral);
      });

      it('should have the property nickname (base name: "nickname")', function() {
        // TODO: update the code to test the property nickname
        expect(instance).to.have.property('nickname');
        // expect(instance.nickname).to.be(expectedValueLiteral);
      });

      it('should have the property pronouns (base name: "pronouns")', function() {
        // TODO: update the code to test the property pronouns
        expect(instance).to.have.property('pronouns');
        // expect(instance.pronouns).to.be(expectedValueLiteral);
      });

      it('should have the property aboutMe (base name: "aboutMe")', function() {
        // TODO: update the code to test the property aboutMe
        expect(instance).to.have.property('aboutMe');
        // expect(instance.aboutMe).to.be(expectedValueLiteral);
      });

      it('should have the property favoriteClimb (base name: "favoriteClimb")', function() {
        // TODO: update the code to test the property favoriteClimb
        expect(instance).to.have.property('favoriteClimb');
        // expect(instance.favoriteClimb).to.be(expectedValueLiteral);
      });

      it('should have the property goalClimb (base name: "goalClimb")', function() {
        // TODO: update the code to test the property goalClimb
        expect(instance).to.have.property('goalClimb');
        // expect(instance.goalClimb).to.be(expectedValueLiteral);
      });

      it('should have the property funFact (base name: "funFact")', function() {
        // TODO: update the code to test the property funFact
        expect(instance).to.have.property('funFact');
        // expect(instance.funFact).to.be(expectedValueLiteral);
      });

      it('should have the property email (base name: "email")', function() {
        // TODO: update the code to test the property email
        expect(instance).to.have.property('email');
        // expect(instance.email).to.be(expectedValueLiteral);
      });

      it('should have the property phone (base name: "phone")', function() {
        // TODO: update the code to test the property phone
        expect(instance).to.have.property('phone');
        // expect(instance.phone).to.be(expectedValueLiteral);
      });

      it('should have the property streetAddress (base name: "streetAddress")', function() {
        // TODO: update the code to test the property streetAddress
        expect(instance).to.have.property('streetAddress');
        // expect(instance.streetAddress).to.be(expectedValueLiteral);
      });

      it('should have the property city (base name: "city")', function() {
        // TODO: update the code to test the property city
        expect(instance).to.have.property('city');
        // expect(instance.city).to.be(expectedValueLiteral);
      });

      it('should have the property state (base name: "state")', function() {
        // TODO: update the code to test the property state
        expect(instance).to.have.property('state');
        // expect(instance.state).to.be(expectedValueLiteral);
      });

      it('should have the property zip (base name: "zip")', function() {
        // TODO: update the code to test the property zip
        expect(instance).to.have.property('zip');
        // expect(instance.zip).to.be(expectedValueLiteral);
      });

      it('should have the property insuranceCarrier (base name: "insuranceCarrier")', function() {
        // TODO: update the code to test the property insuranceCarrier
        expect(instance).to.have.property('insuranceCarrier');
        // expect(instance.insuranceCarrier).to.be(expectedValueLiteral);
      });

      it('should have the property emergencyContact (base name: "emergencyContact")', function() {
        // TODO: update the code to test the property emergencyContact
        expect(instance).to.have.property('emergencyContact');
        // expect(instance.emergencyContact).to.be(expectedValueLiteral);
      });

      it('should have the property emergencyContactPhone (base name: "emergencyContactPhone")', function() {
        // TODO: update the code to test the property emergencyContactPhone
        expect(instance).to.have.property('emergencyContactPhone');
        // expect(instance.emergencyContactPhone).to.be(expectedValueLiteral);
      });

    });
  });

}));
