/*
 * BRC API
 * This is an API that allows access to Boealps BRC course and participant data.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jeanruggiero@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BrcApi);
  }
}(this, function(expect, BrcApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('InstructorReview', function() {
      beforeEach(function() {
        instance = new BrcApi.InstructorReview();
      });

      it('should create an instance of InstructorReview', function() {
        // TODO: update the code to test InstructorReview
        expect(instance).to.be.a(BrcApi.InstructorReview);
      });

      it('should have the property instructor (base name: "instructor")', function() {
        // TODO: update the code to test the property instructor
        expect(instance).to.have.property('instructor');
        // expect(instance.instructor).to.be(expectedValueLiteral);
      });

      it('should have the property author (base name: "author")', function() {
        // TODO: update the code to test the property author
        expect(instance).to.have.property('author');
        // expect(instance.author).to.be(expectedValueLiteral);
      });

      it('should have the property outing (base name: "outing")', function() {
        // TODO: update the code to test the property outing
        expect(instance).to.have.property('outing');
        // expect(instance.outing).to.be(expectedValueLiteral);
      });

      it('should have the property learningStyle (base name: "learning_style")', function() {
        // TODO: update the code to test the property learningStyle
        expect(instance).to.have.property('learningStyle');
        // expect(instance.learningStyle).to.be(expectedValueLiteral);
      });

      it('should have the property explanations (base name: "explanations")', function() {
        // TODO: update the code to test the property explanations
        expect(instance).to.have.property('explanations');
        // expect(instance.explanations).to.be(expectedValueLiteral);
      });

      it('should have the property demos (base name: "demos")', function() {
        // TODO: update the code to test the property demos
        expect(instance).to.have.property('demos');
        // expect(instance.demos).to.be(expectedValueLiteral);
      });

      it('should have the property patience (base name: "patience")', function() {
        // TODO: update the code to test the property patience
        expect(instance).to.have.property('patience');
        // expect(instance.patience).to.be(expectedValueLiteral);
      });

      it('should have the property didWell (base name: "did_well")', function() {
        // TODO: update the code to test the property didWell
        expect(instance).to.have.property('didWell');
        // expect(instance.didWell).to.be(expectedValueLiteral);
      });

      it('should have the property didBad (base name: "did_bad")', function() {
        // TODO: update the code to test the property didBad
        expect(instance).to.have.property('didBad');
        // expect(instance.didBad).to.be(expectedValueLiteral);
      });

      it('should have the property safety (base name: "safety")', function() {
        // TODO: update the code to test the property safety
        expect(instance).to.have.property('safety');
        // expect(instance.safety).to.be(expectedValueLiteral);
      });

      it('should have the property comments (base name: "comments")', function() {
        // TODO: update the code to test the property comments
        expect(instance).to.have.property('comments');
        // expect(instance.comments).to.be(expectedValueLiteral);
      });

    });
  });

}));
