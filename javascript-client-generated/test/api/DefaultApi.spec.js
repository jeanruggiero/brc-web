/*
 * BRC API
 * This is an API that allows access to Boealps BRC course and participant data.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: jeanruggiero@gmail.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.10
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.BrcApi);
  }
}(this, function(expect, BrcApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new BrcApi.DefaultApi();
  });

  describe('(package)', function() {
    describe('DefaultApi', function() {
      describe('gearGet', function() {
        it('should call gearGet successfully', function(done) {
          // TODO: uncomment gearGet call and complete the assertions
          /*

          instance.gearGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BrcApi.Gear);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(1);
              expect(data.name).to.be.a('string');
              expect(data.name).to.be("Rope");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("80m dry rope");
              expect(data.recommendation).to.be.a('string');
              expect(data.recommendation).to.be("www.ropes.com/coolrope");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('homeworkGet', function() {
        it('should call homeworkGet successfully', function(done) {
          // TODO: uncomment, update parameter values for homeworkGet call and complete the assertions
          /*
          var opts = {};
          opts.dueAfter = "dueAfter_example";
          opts.dueBefore = "dueBefore_example";

          instance.homeworkGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BrcApi.Homework);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(1);
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("Watch climbing videos");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("Watch all five videos");
              expect(data.link).to.be.a('string');
              expect(data.link).to.be("www.climbingvideo.com");
              expect(data.dueDate).to.be.a('string');
              expect(data.dueDate).to.be("2019-07-08 01:41:50+00:00");
              expect(data.lecture).to.be.a('number');
              expect(data.lecture).to.be(1);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('meetingsLecturesGet', function() {
        it('should call meetingsLecturesGet successfully', function(done) {
          // TODO: uncomment, update parameter values for meetingsLecturesGet call and complete the assertions
          /*
          var opts = {};
          opts.occursAfter = "occursAfter_example";
          opts.occursBefore = "occursBefore_example";

          instance.meetingsLecturesGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BrcApi.Lecture);
              expect(data._number).to.be.a('number');
              expect(data._number).to.be(1);
              expect(data.topic).to.be.a('string');
              expect(data.topic).to.be("Climbing Technique");
              expect(data.time).to.be.a('string');
              expect(data.time).to.be("2019-07-08 01:41:50+00:00");
              expect(data.location).to.be.a('string');
              expect(data.location).to.be("Lecture Room");
              expect(data.presentationFile).to.be.a('string');
              expect(data.presentationFile).to.be("www.files.com/lecture1");
              expect(data.locationLink).to.be.a('string');
              expect(data.locationLink).to.be("maps.google.com");
              expect(data.potluckLink).to.be.a('string');
              expect(data.potluckLink).to.be("www.files.com/potluck1");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('meetingsOutingsGet', function() {
        it('should call meetingsOutingsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for meetingsOutingsGet call and complete the assertions
          /*
          var opts = {};
          opts.occursAfter = "occursAfter_example";
          opts.occursBefore = "occursBefore_example";

          instance.meetingsOutingsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BrcApi.Outing);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(1);
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("Leavenworth Outing");
              expect(data.location).to.be.a('string');
              expect(data.location).to.be("Leavenworth, WA");
              expect(data.startDate).to.be.a('string');
              expect(data.startDate).to.be("2019-07-08 01:41:50+00:00");
              expect(data.endDate).to.be.a('string');
              expect(data.endDate).to.be("2019-07-08 01:41:50+00:00");
              expect(data.objectives).to.be.a('string');
              expect(data.objectives).to.be("Learn some new things");
              expect(data.description).to.be.a('string');
              expect(data.description).to.be("Let's do some climbing and also learn things.");
              expect(data.itinerary).to.be.a('string');
              expect(data.itinerary).to.be("8am: Meet up, 9am: climb");
              expect(data.campground).to.be.a('string');
              expect(data.campground).to.be("State Park Campground");
              expect(data.campsite).to.be.a('string');
              expect(data.campsite).to.be("group site, site 5");
              expect(data.campingLocation).to.be.a('string');
              expect(data.campingLocation).to.be("maps.google.com");
              expect(data.campingCheckin).to.be.a('string');
              expect(data.campingCheckin).to.be("2019-07-08 01:41:50+00:00");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('postsGet', function() {
        it('should call postsGet successfully', function(done) {
          // TODO: uncomment postsGet call and complete the assertions
          /*

          instance.postsGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BrcApi.Update);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(1);
              expect(data.author).to.be.a('number');
              expect(data.author).to.be(1);
              expect(data.time).to.be.a('string');
              expect(data.time).to.be("2019-07-08 01:41:50+00:00");
              expect(data.title).to.be.a('string');
              expect(data.title).to.be("Announcing the Start of Class!");
              expect(data.content).to.be.a('string');
              expect(data.content).to.be("Here is the content of a class update. It could say anything.");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsGradClimbGet', function() {
        it('should call reviewsGradClimbGet successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsGradClimbGet call and complete the assertions
          /*
          var opts = {};
          opts.student = 56;
          opts.instructor = 56;

          instance.reviewsGradClimbGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BrcApi.GradClimbReview);
              expect(data.student).to.be.a(BrcApi.Student);
                    expect(data.student.id).to.be.a('number');
                expect(data.student.id).to.be(1);
                expect(data.student.lastName).to.be.a('string');
                expect(data.student.lastName).to.be("Smith");
                expect(data.student.firstName).to.be.a('string');
                expect(data.student.firstName).to.be("Jonathan");
                expect(data.student.nickname).to.be.a('string');
                expect(data.student.nickname).to.be("Johnny");
                expect(data.student.pronouns).to.be.a('string');
                expect(data.student.pronouns).to.be("He/him");
                expect(data.student.aboutMe).to.be.a('string');
                expect(data.student.aboutMe).to.be("Hi, I'm Johnny. I like climbing and I'm excited for this class!");
                expect(data.student.favoriteClimb).to.be.a('string');
                expect(data.student.favoriteClimb).to.be("Castle Peak");
                expect(data.student.goalClimb).to.be.a('string');
                expect(data.student.goalClimb).to.be("Beckey Route on Liberty Bell");
                expect(data.student.funFact).to.be.a('string');
                expect(data.student.funFact).to.be("I'm afraid of bears.");
                expect(data.student.email).to.be.a('string');
                expect(data.student.email).to.be("johnny@somewhere.com");
                expect(data.student.phone).to.be.a('number');
                expect(data.student.phone).to.be(1234567890);
                expect(data.student.streetAddress).to.be.a('string');
                expect(data.student.streetAddress).to.be("123 Lane St");
                expect(data.student.city).to.be.a('string');
                expect(data.student.city).to.be("Seattle");
                expect(data.student.state).to.be.a('string');
                expect(data.student.state).to.be("WA");
                expect(data.student.zip).to.be.a('number');
                expect(data.student.zip).to.be(98122);
                expect(data.student.insuranceCarrier).to.be.a('string');
                expect(data.student.insuranceCarrier).to.be("BlueCross");
                expect(data.student.emergencyContact).to.be.a('string');
                expect(data.student.emergencyContact).to.be("Mommy");
                expect(data.student.emergencyContactPhone).to.be.a('number');
                expect(data.student.emergencyContactPhone).to.be(1234567890);
              expect(data.instructor).to.be.a(Object);
              expect(data.instructor).to.be();
              expect(data.time).to.be.a('string');
              expect(data.time).to.be("2019-07-08 01:41:50+00:00");
              expect(data.outing).to.be.a(BrcApi.Outing);
                    expect(data.outing.id).to.be.a('number');
                expect(data.outing.id).to.be(1);
                expect(data.outing.title).to.be.a('string');
                expect(data.outing.title).to.be("Leavenworth Outing");
                expect(data.outing.location).to.be.a('string');
                expect(data.outing.location).to.be("Leavenworth, WA");
                expect(data.outing.startDate).to.be.a('string');
                expect(data.outing.startDate).to.be("2019-07-08 01:41:50+00:00");
                expect(data.outing.endDate).to.be.a('string');
                expect(data.outing.endDate).to.be("2019-07-08 01:41:50+00:00");
                expect(data.outing.objectives).to.be.a('string');
                expect(data.outing.objectives).to.be("Learn some new things");
                expect(data.outing.description).to.be.a('string');
                expect(data.outing.description).to.be("Let's do some climbing and also learn things.");
                expect(data.outing.itinerary).to.be.a('string');
                expect(data.outing.itinerary).to.be("8am: Meet up, 9am: climb");
                expect(data.outing.campground).to.be.a('string');
                expect(data.outing.campground).to.be("State Park Campground");
                expect(data.outing.campsite).to.be.a('string');
                expect(data.outing.campsite).to.be("group site, site 5");
                expect(data.outing.campingLocation).to.be.a('string');
                expect(data.outing.campingLocation).to.be("maps.google.com");
                expect(data.outing.campingCheckin).to.be.a('string');
                expect(data.outing.campingCheckin).to.be("2019-07-08 01:41:50+00:00");
              expect(data.knots).to.be.a('number');
              expect(data.knots).to.be(2);
              expect(data.belay).to.be.a('number');
              expect(data.belay).to.be(2);
              expect(data.rappel).to.be.a('number');
              expect(data.rappel).to.be(2);
              expect(data.systems).to.be.a('number');
              expect(data.systems).to.be(2);
              expect(data.anchorSafety).to.be.a('number');
              expect(data.anchorSafety).to.be(2);
              expect(data.gearPlacement).to.be.a('number');
              expect(data.gearPlacement).to.be(2);
              expect(data.anchorBuilding).to.be.a('number');
              expect(data.anchorBuilding).to.be(2);
              expect(data.safety).to.be.a('number');
              expect(data.safety).to.be(2);
              expect(data.efficiency).to.be.a('number');
              expect(data.efficiency).to.be(2);
              expect(data.gearCleaning).to.be.a('number');
              expect(data.gearCleaning).to.be(2);
              expect(data.technique).to.be.a('number');
              expect(data.technique).to.be(2);
              expect(data.routefinding).to.be.a('number');
              expect(data.routefinding).to.be(2);
              expect(data.areas).to.be.a('string');
              expect(data.areas).to.be("Bob's Wall");
              expect(data.currentComfortGrade).to.be.a('string');
              expect(data.currentComfortGrade).to.be("5.9");
              expect(data.currentLimitGrade).to.be.a('string');
              expect(data.currentLimitGrade).to.be("5.9");
              expect(data.recommendation).to.be.a('string');
              expect(data.recommendation).to.be("5.9 multipitch");
              expect(data.comments).to.be.a('string');
              expect(data.comments).to.be("Here are some comments about how this student did.");
              expect(data.tripPlanning).to.be.a('number');
              expect(data.tripPlanning).to.be(2);
              expect(data.betaSheet).to.be.a('number');
              expect(data.betaSheet).to.be(2);
              expect(data.transitions).to.be.a('number');
              expect(data.transitions).to.be(2);
              expect(data.communication).to.be.a('number');
              expect(data.communication).to.be(2);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsGradClimbIdGet', function() {
        it('should call reviewsGradClimbIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsGradClimbIdGet call and complete the assertions
          /*
          var id = 56;

          instance.reviewsGradClimbIdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsGradClimbIdPut', function() {
        it('should call reviewsGradClimbIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsGradClimbIdPut call
          /*
          var id = 56;
          var review = new BrcApi.GradClimbReview();
          review.student = new BrcApi.Student();
          review.student.id = 1;
          review.student.lastName = "Smith";
          review.student.firstName = "Jonathan";
          review.student.nickname = "Johnny";
          review.student.pronouns = "He/him";
          review.student.aboutMe = "Hi, I'm Johnny. I like climbing and I'm excited for this class!";
          review.student.favoriteClimb = "Castle Peak";
          review.student.goalClimb = "Beckey Route on Liberty Bell";
          review.student.funFact = "I'm afraid of bears.";
          review.student.email = "johnny@somewhere.com";
          review.student.phone = 1234567890;
          review.student.streetAddress = "123 Lane St";
          review.student.city = "Seattle";
          review.student.state = "WA";
          review.student.zip = 98122;
          review.student.insuranceCarrier = "BlueCross";
          review.student.emergencyContact = "Mommy";
          review.student.emergencyContactPhone = 1234567890;
          review.instructor = ;
          review.time = "2019-07-08 01:41:50+00:00";
          review.outing = new BrcApi.Outing();
          review.outing.id = 1;
          review.outing.title = "Leavenworth Outing";
          review.outing.location = "Leavenworth, WA";
          review.outing.startDate = "2019-07-08 01:41:50+00:00";
          review.outing.endDate = "2019-07-08 01:41:50+00:00";
          review.outing.objectives = "Learn some new things";
          review.outing.description = "Let's do some climbing and also learn things.";
          review.outing.itinerary = "8am: Meet up, 9am: climb";
          review.outing.campground = "State Park Campground";
          review.outing.campsite = "group site, site 5";
          review.outing.campingLocation = "maps.google.com";
          review.outing.campingCheckin = "2019-07-08 01:41:50+00:00";
          review.knots = 2;
          review.belay = 2;
          review.rappel = 2;
          review.systems = 2;
          review.anchorSafety = 2;
          review.gearPlacement = 2;
          review.anchorBuilding = 2;
          review.safety = 2;
          review.efficiency = 2;
          review.gearCleaning = 2;
          review.technique = 2;
          review.routefinding = 2;
          review.areas = "Bob's Wall";
          review.currentComfortGrade = "5.9";
          review.currentLimitGrade = "5.9";
          review.recommendation = "5.9 multipitch";
          review.comments = "Here are some comments about how this student did.";
          review.tripPlanning = 2;
          review.betaSheet = 2;
          review.transitions = 2;
          review.communication = 2;

          instance.reviewsGradClimbIdPut(id, review, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsGradClimbPost', function() {
        it('should call reviewsGradClimbPost successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsGradClimbPost call
          /*
          var review = new BrcApi.GradClimbReview();
          review.student = new BrcApi.Student();
          review.student.id = 1;
          review.student.lastName = "Smith";
          review.student.firstName = "Jonathan";
          review.student.nickname = "Johnny";
          review.student.pronouns = "He/him";
          review.student.aboutMe = "Hi, I'm Johnny. I like climbing and I'm excited for this class!";
          review.student.favoriteClimb = "Castle Peak";
          review.student.goalClimb = "Beckey Route on Liberty Bell";
          review.student.funFact = "I'm afraid of bears.";
          review.student.email = "johnny@somewhere.com";
          review.student.phone = 1234567890;
          review.student.streetAddress = "123 Lane St";
          review.student.city = "Seattle";
          review.student.state = "WA";
          review.student.zip = 98122;
          review.student.insuranceCarrier = "BlueCross";
          review.student.emergencyContact = "Mommy";
          review.student.emergencyContactPhone = 1234567890;
          review.instructor = ;
          review.time = "2019-07-08 01:41:50+00:00";
          review.outing = new BrcApi.Outing();
          review.outing.id = 1;
          review.outing.title = "Leavenworth Outing";
          review.outing.location = "Leavenworth, WA";
          review.outing.startDate = "2019-07-08 01:41:50+00:00";
          review.outing.endDate = "2019-07-08 01:41:50+00:00";
          review.outing.objectives = "Learn some new things";
          review.outing.description = "Let's do some climbing and also learn things.";
          review.outing.itinerary = "8am: Meet up, 9am: climb";
          review.outing.campground = "State Park Campground";
          review.outing.campsite = "group site, site 5";
          review.outing.campingLocation = "maps.google.com";
          review.outing.campingCheckin = "2019-07-08 01:41:50+00:00";
          review.knots = 2;
          review.belay = 2;
          review.rappel = 2;
          review.systems = 2;
          review.anchorSafety = 2;
          review.gearPlacement = 2;
          review.anchorBuilding = 2;
          review.safety = 2;
          review.efficiency = 2;
          review.gearCleaning = 2;
          review.technique = 2;
          review.routefinding = 2;
          review.areas = "Bob's Wall";
          review.currentComfortGrade = "5.9";
          review.currentLimitGrade = "5.9";
          review.recommendation = "5.9 multipitch";
          review.comments = "Here are some comments about how this student did.";
          review.tripPlanning = 2;
          review.betaSheet = 2;
          review.transitions = 2;
          review.communication = 2;

          instance.reviewsGradClimbPost(review, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsInstructorReviewGet', function() {
        it('should call reviewsInstructorReviewGet successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsInstructorReviewGet call and complete the assertions
          /*
          var opts = {};
          opts.student = 56;
          opts.instructor = 56;

          instance.reviewsInstructorReviewGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BrcApi.InstructorReview);
              expect(data.instructor).to.be.a(Object);
              expect(data.instructor).to.be();
              expect(data.author).to.be.a(Object);
              expect(data.author).to.be();
              expect(data.outing).to.be.a(BrcApi.Outing);
                    expect(data.outing.id).to.be.a('number');
                expect(data.outing.id).to.be(1);
                expect(data.outing.title).to.be.a('string');
                expect(data.outing.title).to.be("Leavenworth Outing");
                expect(data.outing.location).to.be.a('string');
                expect(data.outing.location).to.be("Leavenworth, WA");
                expect(data.outing.startDate).to.be.a('string');
                expect(data.outing.startDate).to.be("2019-07-08 01:41:50+00:00");
                expect(data.outing.endDate).to.be.a('string');
                expect(data.outing.endDate).to.be("2019-07-08 01:41:50+00:00");
                expect(data.outing.objectives).to.be.a('string');
                expect(data.outing.objectives).to.be("Learn some new things");
                expect(data.outing.description).to.be.a('string');
                expect(data.outing.description).to.be("Let's do some climbing and also learn things.");
                expect(data.outing.itinerary).to.be.a('string');
                expect(data.outing.itinerary).to.be("8am: Meet up, 9am: climb");
                expect(data.outing.campground).to.be.a('string');
                expect(data.outing.campground).to.be("State Park Campground");
                expect(data.outing.campsite).to.be.a('string');
                expect(data.outing.campsite).to.be("group site, site 5");
                expect(data.outing.campingLocation).to.be.a('string');
                expect(data.outing.campingLocation).to.be("maps.google.com");
                expect(data.outing.campingCheckin).to.be.a('string');
                expect(data.outing.campingCheckin).to.be("2019-07-08 01:41:50+00:00");
              expect(data.learningStyle).to.be.a('number');
              expect(data.learningStyle).to.be(2);
              expect(data.explanations).to.be.a('number');
              expect(data.explanations).to.be(2);
              expect(data.demos).to.be.a('number');
              expect(data.demos).to.be(2);
              expect(data.patience).to.be.a('number');
              expect(data.patience).to.be(2);
              expect(data.didWell).to.be.a('string');
              expect(data.didWell).to.be("Helped me learn knots");
              expect(data.didBad).to.be.a('string');
              expect(data.didBad).to.be("Didn't explain rappelling");
              expect(data.safety).to.be.a('string');
              expect(data.safety).to.be("No safety issues");
              expect(data.comments).to.be.a('string');
              expect(data.comments).to.be("Here are comments about how this instructor did");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsInstructorReviewIdGet', function() {
        it('should call reviewsInstructorReviewIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsInstructorReviewIdGet call and complete the assertions
          /*
          var id = 56;

          instance.reviewsInstructorReviewIdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsInstructorReviewIdPut', function() {
        it('should call reviewsInstructorReviewIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsInstructorReviewIdPut call
          /*
          var id = 56;
          var review = new BrcApi.InstructorReview();
          review.instructor = ;
          review.author = ;
          review.outing = new BrcApi.Outing();
          review.outing.id = 1;
          review.outing.title = "Leavenworth Outing";
          review.outing.location = "Leavenworth, WA";
          review.outing.startDate = "2019-07-08 01:41:50+00:00";
          review.outing.endDate = "2019-07-08 01:41:50+00:00";
          review.outing.objectives = "Learn some new things";
          review.outing.description = "Let's do some climbing and also learn things.";
          review.outing.itinerary = "8am: Meet up, 9am: climb";
          review.outing.campground = "State Park Campground";
          review.outing.campsite = "group site, site 5";
          review.outing.campingLocation = "maps.google.com";
          review.outing.campingCheckin = "2019-07-08 01:41:50+00:00";
          review.learningStyle = 2;
          review.explanations = 2;
          review.demos = 2;
          review.patience = 2;
          review.didWell = "Helped me learn knots";
          review.didBad = "Didn't explain rappelling";
          review.safety = "No safety issues";
          review.comments = "Here are comments about how this instructor did";

          instance.reviewsInstructorReviewIdPut(id, review, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsInstructorReviewPost', function() {
        it('should call reviewsInstructorReviewPost successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsInstructorReviewPost call
          /*
          var review = new BrcApi.InstructorReview();
          review.instructor = ;
          review.author = ;
          review.outing = new BrcApi.Outing();
          review.outing.id = 1;
          review.outing.title = "Leavenworth Outing";
          review.outing.location = "Leavenworth, WA";
          review.outing.startDate = "2019-07-08 01:41:50+00:00";
          review.outing.endDate = "2019-07-08 01:41:50+00:00";
          review.outing.objectives = "Learn some new things";
          review.outing.description = "Let's do some climbing and also learn things.";
          review.outing.itinerary = "8am: Meet up, 9am: climb";
          review.outing.campground = "State Park Campground";
          review.outing.campsite = "group site, site 5";
          review.outing.campingLocation = "maps.google.com";
          review.outing.campingCheckin = "2019-07-08 01:41:50+00:00";
          review.learningStyle = 2;
          review.explanations = 2;
          review.demos = 2;
          review.patience = 2;
          review.didWell = "Helped me learn knots";
          review.didBad = "Didn't explain rappelling";
          review.safety = "No safety issues";
          review.comments = "Here are comments about how this instructor did";

          instance.reviewsInstructorReviewPost(review, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsLeavenworthGet', function() {
        it('should call reviewsLeavenworthGet successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsLeavenworthGet call and complete the assertions
          /*
          var opts = {};
          opts.student = 56;
          opts.instructor = 56;

          instance.reviewsLeavenworthGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BrcApi.LeavenworthReview);
              expect(data.student).to.be.a(BrcApi.Student);
                    expect(data.student.id).to.be.a('number');
                expect(data.student.id).to.be(1);
                expect(data.student.lastName).to.be.a('string');
                expect(data.student.lastName).to.be("Smith");
                expect(data.student.firstName).to.be.a('string');
                expect(data.student.firstName).to.be("Jonathan");
                expect(data.student.nickname).to.be.a('string');
                expect(data.student.nickname).to.be("Johnny");
                expect(data.student.pronouns).to.be.a('string');
                expect(data.student.pronouns).to.be("He/him");
                expect(data.student.aboutMe).to.be.a('string');
                expect(data.student.aboutMe).to.be("Hi, I'm Johnny. I like climbing and I'm excited for this class!");
                expect(data.student.favoriteClimb).to.be.a('string');
                expect(data.student.favoriteClimb).to.be("Castle Peak");
                expect(data.student.goalClimb).to.be.a('string');
                expect(data.student.goalClimb).to.be("Beckey Route on Liberty Bell");
                expect(data.student.funFact).to.be.a('string');
                expect(data.student.funFact).to.be("I'm afraid of bears.");
                expect(data.student.email).to.be.a('string');
                expect(data.student.email).to.be("johnny@somewhere.com");
                expect(data.student.phone).to.be.a('number');
                expect(data.student.phone).to.be(1234567890);
                expect(data.student.streetAddress).to.be.a('string');
                expect(data.student.streetAddress).to.be("123 Lane St");
                expect(data.student.city).to.be.a('string');
                expect(data.student.city).to.be("Seattle");
                expect(data.student.state).to.be.a('string');
                expect(data.student.state).to.be("WA");
                expect(data.student.zip).to.be.a('number');
                expect(data.student.zip).to.be(98122);
                expect(data.student.insuranceCarrier).to.be.a('string');
                expect(data.student.insuranceCarrier).to.be("BlueCross");
                expect(data.student.emergencyContact).to.be.a('string');
                expect(data.student.emergencyContact).to.be("Mommy");
                expect(data.student.emergencyContactPhone).to.be.a('number');
                expect(data.student.emergencyContactPhone).to.be(1234567890);
              expect(data.instructor).to.be.a(Object);
              expect(data.instructor).to.be();
              expect(data.time).to.be.a('string');
              expect(data.time).to.be("2019-07-08 01:41:50+00:00");
              expect(data.outing).to.be.a(BrcApi.Outing);
                    expect(data.outing.id).to.be.a('number');
                expect(data.outing.id).to.be(1);
                expect(data.outing.title).to.be.a('string');
                expect(data.outing.title).to.be("Leavenworth Outing");
                expect(data.outing.location).to.be.a('string');
                expect(data.outing.location).to.be("Leavenworth, WA");
                expect(data.outing.startDate).to.be.a('string');
                expect(data.outing.startDate).to.be("2019-07-08 01:41:50+00:00");
                expect(data.outing.endDate).to.be.a('string');
                expect(data.outing.endDate).to.be("2019-07-08 01:41:50+00:00");
                expect(data.outing.objectives).to.be.a('string');
                expect(data.outing.objectives).to.be("Learn some new things");
                expect(data.outing.description).to.be.a('string');
                expect(data.outing.description).to.be("Let's do some climbing and also learn things.");
                expect(data.outing.itinerary).to.be.a('string');
                expect(data.outing.itinerary).to.be("8am: Meet up, 9am: climb");
                expect(data.outing.campground).to.be.a('string');
                expect(data.outing.campground).to.be("State Park Campground");
                expect(data.outing.campsite).to.be.a('string');
                expect(data.outing.campsite).to.be("group site, site 5");
                expect(data.outing.campingLocation).to.be.a('string');
                expect(data.outing.campingLocation).to.be("maps.google.com");
                expect(data.outing.campingCheckin).to.be.a('string');
                expect(data.outing.campingCheckin).to.be("2019-07-08 01:41:50+00:00");
              expect(data.knots).to.be.a('number');
              expect(data.knots).to.be(2);
              expect(data.belay).to.be.a('number');
              expect(data.belay).to.be(2);
              expect(data.rappel).to.be.a('number');
              expect(data.rappel).to.be(2);
              expect(data.systems).to.be.a('number');
              expect(data.systems).to.be(2);
              expect(data.anchorSafety).to.be.a('number');
              expect(data.anchorSafety).to.be(2);
              expect(data.gearPlacement).to.be.a('number');
              expect(data.gearPlacement).to.be(2);
              expect(data.anchorBuilding).to.be.a('number');
              expect(data.anchorBuilding).to.be(2);
              expect(data.safety).to.be.a('number');
              expect(data.safety).to.be(2);
              expect(data.efficiency).to.be.a('number');
              expect(data.efficiency).to.be(2);
              expect(data.gearCleaning).to.be.a('number');
              expect(data.gearCleaning).to.be(2);
              expect(data.technique).to.be.a('number');
              expect(data.technique).to.be(2);
              expect(data.routefinding).to.be.a('number');
              expect(data.routefinding).to.be(2);
              expect(data.areas).to.be.a('string');
              expect(data.areas).to.be("Bob's Wall");
              expect(data.currentComfortGrade).to.be.a('string');
              expect(data.currentComfortGrade).to.be("5.9");
              expect(data.currentLimitGrade).to.be.a('string');
              expect(data.currentLimitGrade).to.be("5.9");
              expect(data.recommendation).to.be.a('string');
              expect(data.recommendation).to.be("5.9 multipitch");
              expect(data.comments).to.be.a('string');
              expect(data.comments).to.be("Here are some comments about how this student did.");
              expect(data.leavenworthCleanAndRappelBolts).to.be.a('number');
              expect(data.leavenworthCleanAndRappelBolts).to.be(2);
              expect(data.guideMode).to.be.a('number');
              expect(data.guideMode).to.be(2);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsLeavenworthIdGet', function() {
        it('should call reviewsLeavenworthIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsLeavenworthIdGet call and complete the assertions
          /*
          var id = 56;

          instance.reviewsLeavenworthIdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsLeavenworthIdPut', function() {
        it('should call reviewsLeavenworthIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsLeavenworthIdPut call
          /*
          var id = 56;
          var review = new BrcApi.LeavenworthReview();
          review.student = new BrcApi.Student();
          review.student.id = 1;
          review.student.lastName = "Smith";
          review.student.firstName = "Jonathan";
          review.student.nickname = "Johnny";
          review.student.pronouns = "He/him";
          review.student.aboutMe = "Hi, I'm Johnny. I like climbing and I'm excited for this class!";
          review.student.favoriteClimb = "Castle Peak";
          review.student.goalClimb = "Beckey Route on Liberty Bell";
          review.student.funFact = "I'm afraid of bears.";
          review.student.email = "johnny@somewhere.com";
          review.student.phone = 1234567890;
          review.student.streetAddress = "123 Lane St";
          review.student.city = "Seattle";
          review.student.state = "WA";
          review.student.zip = 98122;
          review.student.insuranceCarrier = "BlueCross";
          review.student.emergencyContact = "Mommy";
          review.student.emergencyContactPhone = 1234567890;
          review.instructor = ;
          review.time = "2019-07-08 01:41:50+00:00";
          review.outing = new BrcApi.Outing();
          review.outing.id = 1;
          review.outing.title = "Leavenworth Outing";
          review.outing.location = "Leavenworth, WA";
          review.outing.startDate = "2019-07-08 01:41:50+00:00";
          review.outing.endDate = "2019-07-08 01:41:50+00:00";
          review.outing.objectives = "Learn some new things";
          review.outing.description = "Let's do some climbing and also learn things.";
          review.outing.itinerary = "8am: Meet up, 9am: climb";
          review.outing.campground = "State Park Campground";
          review.outing.campsite = "group site, site 5";
          review.outing.campingLocation = "maps.google.com";
          review.outing.campingCheckin = "2019-07-08 01:41:50+00:00";
          review.knots = 2;
          review.belay = 2;
          review.rappel = 2;
          review.systems = 2;
          review.anchorSafety = 2;
          review.gearPlacement = 2;
          review.anchorBuilding = 2;
          review.safety = 2;
          review.efficiency = 2;
          review.gearCleaning = 2;
          review.technique = 2;
          review.routefinding = 2;
          review.areas = "Bob's Wall";
          review.currentComfortGrade = "5.9";
          review.currentLimitGrade = "5.9";
          review.recommendation = "5.9 multipitch";
          review.comments = "Here are some comments about how this student did.";
          review.leavenworthCleanAndRappelBolts = 2;
          review.guideMode = 2;

          instance.reviewsLeavenworthIdPut(id, review, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsLeavenworthPost', function() {
        it('should call reviewsLeavenworthPost successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsLeavenworthPost call
          /*
          var review = new BrcApi.LeavenworthReview();
          review.student = new BrcApi.Student();
          review.student.id = 1;
          review.student.lastName = "Smith";
          review.student.firstName = "Jonathan";
          review.student.nickname = "Johnny";
          review.student.pronouns = "He/him";
          review.student.aboutMe = "Hi, I'm Johnny. I like climbing and I'm excited for this class!";
          review.student.favoriteClimb = "Castle Peak";
          review.student.goalClimb = "Beckey Route on Liberty Bell";
          review.student.funFact = "I'm afraid of bears.";
          review.student.email = "johnny@somewhere.com";
          review.student.phone = 1234567890;
          review.student.streetAddress = "123 Lane St";
          review.student.city = "Seattle";
          review.student.state = "WA";
          review.student.zip = 98122;
          review.student.insuranceCarrier = "BlueCross";
          review.student.emergencyContact = "Mommy";
          review.student.emergencyContactPhone = 1234567890;
          review.instructor = ;
          review.time = "2019-07-08 01:41:50+00:00";
          review.outing = new BrcApi.Outing();
          review.outing.id = 1;
          review.outing.title = "Leavenworth Outing";
          review.outing.location = "Leavenworth, WA";
          review.outing.startDate = "2019-07-08 01:41:50+00:00";
          review.outing.endDate = "2019-07-08 01:41:50+00:00";
          review.outing.objectives = "Learn some new things";
          review.outing.description = "Let's do some climbing and also learn things.";
          review.outing.itinerary = "8am: Meet up, 9am: climb";
          review.outing.campground = "State Park Campground";
          review.outing.campsite = "group site, site 5";
          review.outing.campingLocation = "maps.google.com";
          review.outing.campingCheckin = "2019-07-08 01:41:50+00:00";
          review.knots = 2;
          review.belay = 2;
          review.rappel = 2;
          review.systems = 2;
          review.anchorSafety = 2;
          review.gearPlacement = 2;
          review.anchorBuilding = 2;
          review.safety = 2;
          review.efficiency = 2;
          review.gearCleaning = 2;
          review.technique = 2;
          review.routefinding = 2;
          review.areas = "Bob's Wall";
          review.currentComfortGrade = "5.9";
          review.currentLimitGrade = "5.9";
          review.recommendation = "5.9 multipitch";
          review.comments = "Here are some comments about how this student did.";
          review.leavenworthCleanAndRappelBolts = 2;
          review.guideMode = 2;

          instance.reviewsLeavenworthPost(review, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsSkillsNightGet', function() {
        it('should call reviewsSkillsNightGet successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsSkillsNightGet call and complete the assertions
          /*
          var opts = {};
          opts.student = 56;
          opts.instructor = 56;

          instance.reviewsSkillsNightGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BrcApi.SkillsNightReview);
              expect(data.student).to.be.a(BrcApi.Student);
                    expect(data.student.id).to.be.a('number');
                expect(data.student.id).to.be(1);
                expect(data.student.lastName).to.be.a('string');
                expect(data.student.lastName).to.be("Smith");
                expect(data.student.firstName).to.be.a('string');
                expect(data.student.firstName).to.be("Jonathan");
                expect(data.student.nickname).to.be.a('string');
                expect(data.student.nickname).to.be("Johnny");
                expect(data.student.pronouns).to.be.a('string');
                expect(data.student.pronouns).to.be("He/him");
                expect(data.student.aboutMe).to.be.a('string');
                expect(data.student.aboutMe).to.be("Hi, I'm Johnny. I like climbing and I'm excited for this class!");
                expect(data.student.favoriteClimb).to.be.a('string');
                expect(data.student.favoriteClimb).to.be("Castle Peak");
                expect(data.student.goalClimb).to.be.a('string');
                expect(data.student.goalClimb).to.be("Beckey Route on Liberty Bell");
                expect(data.student.funFact).to.be.a('string');
                expect(data.student.funFact).to.be("I'm afraid of bears.");
                expect(data.student.email).to.be.a('string');
                expect(data.student.email).to.be("johnny@somewhere.com");
                expect(data.student.phone).to.be.a('number');
                expect(data.student.phone).to.be(1234567890);
                expect(data.student.streetAddress).to.be.a('string');
                expect(data.student.streetAddress).to.be("123 Lane St");
                expect(data.student.city).to.be.a('string');
                expect(data.student.city).to.be("Seattle");
                expect(data.student.state).to.be.a('string');
                expect(data.student.state).to.be("WA");
                expect(data.student.zip).to.be.a('number');
                expect(data.student.zip).to.be(98122);
                expect(data.student.insuranceCarrier).to.be.a('string');
                expect(data.student.insuranceCarrier).to.be("BlueCross");
                expect(data.student.emergencyContact).to.be.a('string');
                expect(data.student.emergencyContact).to.be("Mommy");
                expect(data.student.emergencyContactPhone).to.be.a('number');
                expect(data.student.emergencyContactPhone).to.be(1234567890);
              expect(data.time).to.be.a('string');
              expect(data.time).to.be("2019-07-08 01:41:50+00:00");
              expect(data.outing).to.be.a(BrcApi.Outing);
                    expect(data.outing.id).to.be.a('number');
                expect(data.outing.id).to.be(1);
                expect(data.outing.title).to.be.a('string');
                expect(data.outing.title).to.be("Leavenworth Outing");
                expect(data.outing.location).to.be.a('string');
                expect(data.outing.location).to.be("Leavenworth, WA");
                expect(data.outing.startDate).to.be.a('string');
                expect(data.outing.startDate).to.be("2019-07-08 01:41:50+00:00");
                expect(data.outing.endDate).to.be.a('string');
                expect(data.outing.endDate).to.be("2019-07-08 01:41:50+00:00");
                expect(data.outing.objectives).to.be.a('string');
                expect(data.outing.objectives).to.be("Learn some new things");
                expect(data.outing.description).to.be.a('string');
                expect(data.outing.description).to.be("Let's do some climbing and also learn things.");
                expect(data.outing.itinerary).to.be.a('string');
                expect(data.outing.itinerary).to.be("8am: Meet up, 9am: climb");
                expect(data.outing.campground).to.be.a('string');
                expect(data.outing.campground).to.be("State Park Campground");
                expect(data.outing.campsite).to.be.a('string');
                expect(data.outing.campsite).to.be("group site, site 5");
                expect(data.outing.campingLocation).to.be.a('string');
                expect(data.outing.campingLocation).to.be("maps.google.com");
                expect(data.outing.campingCheckin).to.be.a('string');
                expect(data.outing.campingCheckin).to.be("2019-07-08 01:41:50+00:00");
              expect(data.rewovenFigure8).to.be.a('number');
              expect(data.rewovenFigure8).to.be(2);
              expect(data.figure8Bight).to.be.a('number');
              expect(data.figure8Bight).to.be(2);
              expect(data.prusik).to.be.a('number');
              expect(data.prusik).to.be(2);
              expect(data.bachmann).to.be.a('number');
              expect(data.bachmann).to.be(2);
              expect(data.doubleFisherman).to.be.a('number');
              expect(data.doubleFisherman).to.be(2);
              expect(data.waterKnot).to.be.a('number');
              expect(data.waterKnot).to.be(2);
              expect(data.cloveHitch).to.be.a('number');
              expect(data.cloveHitch).to.be(2);
              expect(data.munterHitch).to.be.a('number');
              expect(data.munterHitch).to.be(2);
              expect(data.butterfly).to.be.a('number');
              expect(data.butterfly).to.be(2);
              expect(data.euroDeathKnot).to.be.a('number');
              expect(data.euroDeathKnot).to.be(2);
              expect(data.ropeCoiling).to.be.a('number');
              expect(data.ropeCoiling).to.be(2);
              expect(data.leadBelay).to.be.a('number');
              expect(data.leadBelay).to.be(2);
              expect(data.leadFall).to.be.a('number');
              expect(data.leadFall).to.be(2);
              expect(data.escapeBelay).to.be.a('number');
              expect(data.escapeBelay).to.be(2);
              expect(data.mechanicalAutoblock).to.be.a('number');
              expect(data.mechanicalAutoblock).to.be(2);
              expect(data.munterRappel).to.be.a('number');
              expect(data.munterRappel).to.be(2);
              expect(data.cleanRappelBolts).to.be.a('number');
              expect(data.cleanRappelBolts).to.be(2);
              expect(data.settingBoltedAnchor).to.be.a('number');
              expect(data.settingBoltedAnchor).to.be(2);
              expect(data.ascendingRope).to.be.a('number');
              expect(data.ascendingRope).to.be(2);
              expect(data.comments).to.be.a('string');
              expect(data.comments).to.be("Here are some comments about how this student did.");
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsSkillsNightIdGet', function() {
        it('should call reviewsSkillsNightIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsSkillsNightIdGet call and complete the assertions
          /*
          var id = 56;

          instance.reviewsSkillsNightIdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsSkillsNightIdPut', function() {
        it('should call reviewsSkillsNightIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsSkillsNightIdPut call
          /*
          var id = 56;
          var review = new BrcApi.SkillsNightReview();
          review.student = new BrcApi.Student();
          review.student.id = 1;
          review.student.lastName = "Smith";
          review.student.firstName = "Jonathan";
          review.student.nickname = "Johnny";
          review.student.pronouns = "He/him";
          review.student.aboutMe = "Hi, I'm Johnny. I like climbing and I'm excited for this class!";
          review.student.favoriteClimb = "Castle Peak";
          review.student.goalClimb = "Beckey Route on Liberty Bell";
          review.student.funFact = "I'm afraid of bears.";
          review.student.email = "johnny@somewhere.com";
          review.student.phone = 1234567890;
          review.student.streetAddress = "123 Lane St";
          review.student.city = "Seattle";
          review.student.state = "WA";
          review.student.zip = 98122;
          review.student.insuranceCarrier = "BlueCross";
          review.student.emergencyContact = "Mommy";
          review.student.emergencyContactPhone = 1234567890;
          review.time = "2019-07-08 01:41:50+00:00";
          review.outing = new BrcApi.Outing();
          review.outing.id = 1;
          review.outing.title = "Leavenworth Outing";
          review.outing.location = "Leavenworth, WA";
          review.outing.startDate = "2019-07-08 01:41:50+00:00";
          review.outing.endDate = "2019-07-08 01:41:50+00:00";
          review.outing.objectives = "Learn some new things";
          review.outing.description = "Let's do some climbing and also learn things.";
          review.outing.itinerary = "8am: Meet up, 9am: climb";
          review.outing.campground = "State Park Campground";
          review.outing.campsite = "group site, site 5";
          review.outing.campingLocation = "maps.google.com";
          review.outing.campingCheckin = "2019-07-08 01:41:50+00:00";
          review.rewovenFigure8 = 2;
          review.figure8Bight = 2;
          review.prusik = 2;
          review.bachmann = 2;
          review.doubleFisherman = 2;
          review.waterKnot = 2;
          review.cloveHitch = 2;
          review.munterHitch = 2;
          review.butterfly = 2;
          review.euroDeathKnot = 2;
          review.ropeCoiling = 2;
          review.leadBelay = 2;
          review.leadFall = 2;
          review.escapeBelay = 2;
          review.mechanicalAutoblock = 2;
          review.munterRappel = 2;
          review.cleanRappelBolts = 2;
          review.settingBoltedAnchor = 2;
          review.ascendingRope = 2;
          review.comments = "Here are some comments about how this student did.";

          instance.reviewsSkillsNightIdPut(id, review, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsSkillsNightPost', function() {
        it('should call reviewsSkillsNightPost successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsSkillsNightPost call
          /*
          var review = new BrcApi.SkillsNightReview();
          review.student = new BrcApi.Student();
          review.student.id = 1;
          review.student.lastName = "Smith";
          review.student.firstName = "Jonathan";
          review.student.nickname = "Johnny";
          review.student.pronouns = "He/him";
          review.student.aboutMe = "Hi, I'm Johnny. I like climbing and I'm excited for this class!";
          review.student.favoriteClimb = "Castle Peak";
          review.student.goalClimb = "Beckey Route on Liberty Bell";
          review.student.funFact = "I'm afraid of bears.";
          review.student.email = "johnny@somewhere.com";
          review.student.phone = 1234567890;
          review.student.streetAddress = "123 Lane St";
          review.student.city = "Seattle";
          review.student.state = "WA";
          review.student.zip = 98122;
          review.student.insuranceCarrier = "BlueCross";
          review.student.emergencyContact = "Mommy";
          review.student.emergencyContactPhone = 1234567890;
          review.time = "2019-07-08 01:41:50+00:00";
          review.outing = new BrcApi.Outing();
          review.outing.id = 1;
          review.outing.title = "Leavenworth Outing";
          review.outing.location = "Leavenworth, WA";
          review.outing.startDate = "2019-07-08 01:41:50+00:00";
          review.outing.endDate = "2019-07-08 01:41:50+00:00";
          review.outing.objectives = "Learn some new things";
          review.outing.description = "Let's do some climbing and also learn things.";
          review.outing.itinerary = "8am: Meet up, 9am: climb";
          review.outing.campground = "State Park Campground";
          review.outing.campsite = "group site, site 5";
          review.outing.campingLocation = "maps.google.com";
          review.outing.campingCheckin = "2019-07-08 01:41:50+00:00";
          review.rewovenFigure8 = 2;
          review.figure8Bight = 2;
          review.prusik = 2;
          review.bachmann = 2;
          review.doubleFisherman = 2;
          review.waterKnot = 2;
          review.cloveHitch = 2;
          review.munterHitch = 2;
          review.butterfly = 2;
          review.euroDeathKnot = 2;
          review.ropeCoiling = 2;
          review.leadBelay = 2;
          review.leadFall = 2;
          review.escapeBelay = 2;
          review.mechanicalAutoblock = 2;
          review.munterRappel = 2;
          review.cleanRappelBolts = 2;
          review.settingBoltedAnchor = 2;
          review.ascendingRope = 2;
          review.comments = "Here are some comments about how this student did.";

          instance.reviewsSkillsNightPost(review, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsSquamish1Get', function() {
        it('should call reviewsSquamish1Get successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsSquamish1Get call and complete the assertions
          /*
          var opts = {};
          opts.student = 56;
          opts.instructor = 56;

          instance.reviewsSquamish1Get(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BrcApi.Squamish1Review);
              expect(data.student).to.be.a(BrcApi.Student);
                    expect(data.student.id).to.be.a('number');
                expect(data.student.id).to.be(1);
                expect(data.student.lastName).to.be.a('string');
                expect(data.student.lastName).to.be("Smith");
                expect(data.student.firstName).to.be.a('string');
                expect(data.student.firstName).to.be("Jonathan");
                expect(data.student.nickname).to.be.a('string');
                expect(data.student.nickname).to.be("Johnny");
                expect(data.student.pronouns).to.be.a('string');
                expect(data.student.pronouns).to.be("He/him");
                expect(data.student.aboutMe).to.be.a('string');
                expect(data.student.aboutMe).to.be("Hi, I'm Johnny. I like climbing and I'm excited for this class!");
                expect(data.student.favoriteClimb).to.be.a('string');
                expect(data.student.favoriteClimb).to.be("Castle Peak");
                expect(data.student.goalClimb).to.be.a('string');
                expect(data.student.goalClimb).to.be("Beckey Route on Liberty Bell");
                expect(data.student.funFact).to.be.a('string');
                expect(data.student.funFact).to.be("I'm afraid of bears.");
                expect(data.student.email).to.be.a('string');
                expect(data.student.email).to.be("johnny@somewhere.com");
                expect(data.student.phone).to.be.a('number');
                expect(data.student.phone).to.be(1234567890);
                expect(data.student.streetAddress).to.be.a('string');
                expect(data.student.streetAddress).to.be("123 Lane St");
                expect(data.student.city).to.be.a('string');
                expect(data.student.city).to.be("Seattle");
                expect(data.student.state).to.be.a('string');
                expect(data.student.state).to.be("WA");
                expect(data.student.zip).to.be.a('number');
                expect(data.student.zip).to.be(98122);
                expect(data.student.insuranceCarrier).to.be.a('string');
                expect(data.student.insuranceCarrier).to.be("BlueCross");
                expect(data.student.emergencyContact).to.be.a('string');
                expect(data.student.emergencyContact).to.be("Mommy");
                expect(data.student.emergencyContactPhone).to.be.a('number');
                expect(data.student.emergencyContactPhone).to.be(1234567890);
              expect(data.instructor).to.be.a(Object);
              expect(data.instructor).to.be();
              expect(data.time).to.be.a('string');
              expect(data.time).to.be("2019-07-08 01:41:50+00:00");
              expect(data.outing).to.be.a(BrcApi.Outing);
                    expect(data.outing.id).to.be.a('number');
                expect(data.outing.id).to.be(1);
                expect(data.outing.title).to.be.a('string');
                expect(data.outing.title).to.be("Leavenworth Outing");
                expect(data.outing.location).to.be.a('string');
                expect(data.outing.location).to.be("Leavenworth, WA");
                expect(data.outing.startDate).to.be.a('string');
                expect(data.outing.startDate).to.be("2019-07-08 01:41:50+00:00");
                expect(data.outing.endDate).to.be.a('string');
                expect(data.outing.endDate).to.be("2019-07-08 01:41:50+00:00");
                expect(data.outing.objectives).to.be.a('string');
                expect(data.outing.objectives).to.be("Learn some new things");
                expect(data.outing.description).to.be.a('string');
                expect(data.outing.description).to.be("Let's do some climbing and also learn things.");
                expect(data.outing.itinerary).to.be.a('string');
                expect(data.outing.itinerary).to.be("8am: Meet up, 9am: climb");
                expect(data.outing.campground).to.be.a('string');
                expect(data.outing.campground).to.be("State Park Campground");
                expect(data.outing.campsite).to.be.a('string');
                expect(data.outing.campsite).to.be("group site, site 5");
                expect(data.outing.campingLocation).to.be.a('string');
                expect(data.outing.campingLocation).to.be("maps.google.com");
                expect(data.outing.campingCheckin).to.be.a('string');
                expect(data.outing.campingCheckin).to.be("2019-07-08 01:41:50+00:00");
              expect(data.knots).to.be.a('number');
              expect(data.knots).to.be(2);
              expect(data.belay).to.be.a('number');
              expect(data.belay).to.be(2);
              expect(data.rappel).to.be.a('number');
              expect(data.rappel).to.be(2);
              expect(data.systems).to.be.a('number');
              expect(data.systems).to.be(2);
              expect(data.anchorSafety).to.be.a('number');
              expect(data.anchorSafety).to.be(2);
              expect(data.gearPlacement).to.be.a('number');
              expect(data.gearPlacement).to.be(2);
              expect(data.anchorBuilding).to.be.a('number');
              expect(data.anchorBuilding).to.be(2);
              expect(data.safety).to.be.a('number');
              expect(data.safety).to.be(2);
              expect(data.efficiency).to.be.a('number');
              expect(data.efficiency).to.be(2);
              expect(data.gearCleaning).to.be.a('number');
              expect(data.gearCleaning).to.be(2);
              expect(data.technique).to.be.a('number');
              expect(data.technique).to.be(2);
              expect(data.routefinding).to.be.a('number');
              expect(data.routefinding).to.be(2);
              expect(data.areas).to.be.a('string');
              expect(data.areas).to.be("Bob's Wall");
              expect(data.currentComfortGrade).to.be.a('string');
              expect(data.currentComfortGrade).to.be("5.9");
              expect(data.currentLimitGrade).to.be.a('string');
              expect(data.currentLimitGrade).to.be("5.9");
              expect(data.recommendation).to.be.a('string');
              expect(data.recommendation).to.be("5.9 multipitch");
              expect(data.comments).to.be.a('string');
              expect(data.comments).to.be("Here are some comments about how this student did.");
              expect(data.cleanAndRappel).to.be.a('number');
              expect(data.cleanAndRappel).to.be(2);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsSquamish1IdGet', function() {
        it('should call reviewsSquamish1IdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsSquamish1IdGet call and complete the assertions
          /*
          var id = 56;

          instance.reviewsSquamish1IdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsSquamish1IdPut', function() {
        it('should call reviewsSquamish1IdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsSquamish1IdPut call
          /*
          var id = 56;
          var review = new BrcApi.Squamish1Review();
          review.student = new BrcApi.Student();
          review.student.id = 1;
          review.student.lastName = "Smith";
          review.student.firstName = "Jonathan";
          review.student.nickname = "Johnny";
          review.student.pronouns = "He/him";
          review.student.aboutMe = "Hi, I'm Johnny. I like climbing and I'm excited for this class!";
          review.student.favoriteClimb = "Castle Peak";
          review.student.goalClimb = "Beckey Route on Liberty Bell";
          review.student.funFact = "I'm afraid of bears.";
          review.student.email = "johnny@somewhere.com";
          review.student.phone = 1234567890;
          review.student.streetAddress = "123 Lane St";
          review.student.city = "Seattle";
          review.student.state = "WA";
          review.student.zip = 98122;
          review.student.insuranceCarrier = "BlueCross";
          review.student.emergencyContact = "Mommy";
          review.student.emergencyContactPhone = 1234567890;
          review.instructor = ;
          review.time = "2019-07-08 01:41:50+00:00";
          review.outing = new BrcApi.Outing();
          review.outing.id = 1;
          review.outing.title = "Leavenworth Outing";
          review.outing.location = "Leavenworth, WA";
          review.outing.startDate = "2019-07-08 01:41:50+00:00";
          review.outing.endDate = "2019-07-08 01:41:50+00:00";
          review.outing.objectives = "Learn some new things";
          review.outing.description = "Let's do some climbing and also learn things.";
          review.outing.itinerary = "8am: Meet up, 9am: climb";
          review.outing.campground = "State Park Campground";
          review.outing.campsite = "group site, site 5";
          review.outing.campingLocation = "maps.google.com";
          review.outing.campingCheckin = "2019-07-08 01:41:50+00:00";
          review.knots = 2;
          review.belay = 2;
          review.rappel = 2;
          review.systems = 2;
          review.anchorSafety = 2;
          review.gearPlacement = 2;
          review.anchorBuilding = 2;
          review.safety = 2;
          review.efficiency = 2;
          review.gearCleaning = 2;
          review.technique = 2;
          review.routefinding = 2;
          review.areas = "Bob's Wall";
          review.currentComfortGrade = "5.9";
          review.currentLimitGrade = "5.9";
          review.recommendation = "5.9 multipitch";
          review.comments = "Here are some comments about how this student did.";
          review.cleanAndRappel = 2;

          instance.reviewsSquamish1IdPut(id, review, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsSquamish1Post', function() {
        it('should call reviewsSquamish1Post successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsSquamish1Post call
          /*
          var review = new BrcApi.Squamish1Review();
          review.student = new BrcApi.Student();
          review.student.id = 1;
          review.student.lastName = "Smith";
          review.student.firstName = "Jonathan";
          review.student.nickname = "Johnny";
          review.student.pronouns = "He/him";
          review.student.aboutMe = "Hi, I'm Johnny. I like climbing and I'm excited for this class!";
          review.student.favoriteClimb = "Castle Peak";
          review.student.goalClimb = "Beckey Route on Liberty Bell";
          review.student.funFact = "I'm afraid of bears.";
          review.student.email = "johnny@somewhere.com";
          review.student.phone = 1234567890;
          review.student.streetAddress = "123 Lane St";
          review.student.city = "Seattle";
          review.student.state = "WA";
          review.student.zip = 98122;
          review.student.insuranceCarrier = "BlueCross";
          review.student.emergencyContact = "Mommy";
          review.student.emergencyContactPhone = 1234567890;
          review.instructor = ;
          review.time = "2019-07-08 01:41:50+00:00";
          review.outing = new BrcApi.Outing();
          review.outing.id = 1;
          review.outing.title = "Leavenworth Outing";
          review.outing.location = "Leavenworth, WA";
          review.outing.startDate = "2019-07-08 01:41:50+00:00";
          review.outing.endDate = "2019-07-08 01:41:50+00:00";
          review.outing.objectives = "Learn some new things";
          review.outing.description = "Let's do some climbing and also learn things.";
          review.outing.itinerary = "8am: Meet up, 9am: climb";
          review.outing.campground = "State Park Campground";
          review.outing.campsite = "group site, site 5";
          review.outing.campingLocation = "maps.google.com";
          review.outing.campingCheckin = "2019-07-08 01:41:50+00:00";
          review.knots = 2;
          review.belay = 2;
          review.rappel = 2;
          review.systems = 2;
          review.anchorSafety = 2;
          review.gearPlacement = 2;
          review.anchorBuilding = 2;
          review.safety = 2;
          review.efficiency = 2;
          review.gearCleaning = 2;
          review.technique = 2;
          review.routefinding = 2;
          review.areas = "Bob's Wall";
          review.currentComfortGrade = "5.9";
          review.currentLimitGrade = "5.9";
          review.recommendation = "5.9 multipitch";
          review.comments = "Here are some comments about how this student did.";
          review.cleanAndRappel = 2;

          instance.reviewsSquamish1Post(review, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsSquamish2Get', function() {
        it('should call reviewsSquamish2Get successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsSquamish2Get call and complete the assertions
          /*
          var opts = {};
          opts.student = 56;
          opts.instructor = 56;

          instance.reviewsSquamish2Get(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BrcApi.Squamish2Review);
              expect(data.student).to.be.a(BrcApi.Student);
                    expect(data.student.id).to.be.a('number');
                expect(data.student.id).to.be(1);
                expect(data.student.lastName).to.be.a('string');
                expect(data.student.lastName).to.be("Smith");
                expect(data.student.firstName).to.be.a('string');
                expect(data.student.firstName).to.be("Jonathan");
                expect(data.student.nickname).to.be.a('string');
                expect(data.student.nickname).to.be("Johnny");
                expect(data.student.pronouns).to.be.a('string');
                expect(data.student.pronouns).to.be("He/him");
                expect(data.student.aboutMe).to.be.a('string');
                expect(data.student.aboutMe).to.be("Hi, I'm Johnny. I like climbing and I'm excited for this class!");
                expect(data.student.favoriteClimb).to.be.a('string');
                expect(data.student.favoriteClimb).to.be("Castle Peak");
                expect(data.student.goalClimb).to.be.a('string');
                expect(data.student.goalClimb).to.be("Beckey Route on Liberty Bell");
                expect(data.student.funFact).to.be.a('string');
                expect(data.student.funFact).to.be("I'm afraid of bears.");
                expect(data.student.email).to.be.a('string');
                expect(data.student.email).to.be("johnny@somewhere.com");
                expect(data.student.phone).to.be.a('number');
                expect(data.student.phone).to.be(1234567890);
                expect(data.student.streetAddress).to.be.a('string');
                expect(data.student.streetAddress).to.be("123 Lane St");
                expect(data.student.city).to.be.a('string');
                expect(data.student.city).to.be("Seattle");
                expect(data.student.state).to.be.a('string');
                expect(data.student.state).to.be("WA");
                expect(data.student.zip).to.be.a('number');
                expect(data.student.zip).to.be(98122);
                expect(data.student.insuranceCarrier).to.be.a('string');
                expect(data.student.insuranceCarrier).to.be("BlueCross");
                expect(data.student.emergencyContact).to.be.a('string');
                expect(data.student.emergencyContact).to.be("Mommy");
                expect(data.student.emergencyContactPhone).to.be.a('number');
                expect(data.student.emergencyContactPhone).to.be(1234567890);
              expect(data.instructor).to.be.a(Object);
              expect(data.instructor).to.be();
              expect(data.time).to.be.a('string');
              expect(data.time).to.be("2019-07-08 01:41:50+00:00");
              expect(data.outing).to.be.a(BrcApi.Outing);
                    expect(data.outing.id).to.be.a('number');
                expect(data.outing.id).to.be(1);
                expect(data.outing.title).to.be.a('string');
                expect(data.outing.title).to.be("Leavenworth Outing");
                expect(data.outing.location).to.be.a('string');
                expect(data.outing.location).to.be("Leavenworth, WA");
                expect(data.outing.startDate).to.be.a('string');
                expect(data.outing.startDate).to.be("2019-07-08 01:41:50+00:00");
                expect(data.outing.endDate).to.be.a('string');
                expect(data.outing.endDate).to.be("2019-07-08 01:41:50+00:00");
                expect(data.outing.objectives).to.be.a('string');
                expect(data.outing.objectives).to.be("Learn some new things");
                expect(data.outing.description).to.be.a('string');
                expect(data.outing.description).to.be("Let's do some climbing and also learn things.");
                expect(data.outing.itinerary).to.be.a('string');
                expect(data.outing.itinerary).to.be("8am: Meet up, 9am: climb");
                expect(data.outing.campground).to.be.a('string');
                expect(data.outing.campground).to.be("State Park Campground");
                expect(data.outing.campsite).to.be.a('string');
                expect(data.outing.campsite).to.be("group site, site 5");
                expect(data.outing.campingLocation).to.be.a('string');
                expect(data.outing.campingLocation).to.be("maps.google.com");
                expect(data.outing.campingCheckin).to.be.a('string');
                expect(data.outing.campingCheckin).to.be("2019-07-08 01:41:50+00:00");
              expect(data.knots).to.be.a('number');
              expect(data.knots).to.be(2);
              expect(data.belay).to.be.a('number');
              expect(data.belay).to.be(2);
              expect(data.rappel).to.be.a('number');
              expect(data.rappel).to.be(2);
              expect(data.systems).to.be.a('number');
              expect(data.systems).to.be(2);
              expect(data.anchorSafety).to.be.a('number');
              expect(data.anchorSafety).to.be(2);
              expect(data.gearPlacement).to.be.a('number');
              expect(data.gearPlacement).to.be(2);
              expect(data.anchorBuilding).to.be.a('number');
              expect(data.anchorBuilding).to.be(2);
              expect(data.safety).to.be.a('number');
              expect(data.safety).to.be(2);
              expect(data.efficiency).to.be.a('number');
              expect(data.efficiency).to.be(2);
              expect(data.gearCleaning).to.be.a('number');
              expect(data.gearCleaning).to.be(2);
              expect(data.technique).to.be.a('number');
              expect(data.technique).to.be(2);
              expect(data.routefinding).to.be.a('number');
              expect(data.routefinding).to.be(2);
              expect(data.areas).to.be.a('string');
              expect(data.areas).to.be("Bob's Wall");
              expect(data.currentComfortGrade).to.be.a('string');
              expect(data.currentComfortGrade).to.be("5.9");
              expect(data.currentLimitGrade).to.be.a('string');
              expect(data.currentLimitGrade).to.be("5.9");
              expect(data.recommendation).to.be.a('string');
              expect(data.recommendation).to.be("5.9 multipitch");
              expect(data.comments).to.be.a('string');
              expect(data.comments).to.be("Here are some comments about how this student did.");
              expect(data.squamish2Transitions).to.be.a('number');
              expect(data.squamish2Transitions).to.be(2);
              expect(data.squamish2Communication).to.be.a('number');
              expect(data.squamish2Communication).to.be(2);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsSquamish2IdGet', function() {
        it('should call reviewsSquamish2IdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsSquamish2IdGet call and complete the assertions
          /*
          var id = 56;

          instance.reviewsSquamish2IdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsSquamish2IdPut', function() {
        it('should call reviewsSquamish2IdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsSquamish2IdPut call
          /*
          var id = 56;
          var review = new BrcApi.Squamish2Review();
          review.student = new BrcApi.Student();
          review.student.id = 1;
          review.student.lastName = "Smith";
          review.student.firstName = "Jonathan";
          review.student.nickname = "Johnny";
          review.student.pronouns = "He/him";
          review.student.aboutMe = "Hi, I'm Johnny. I like climbing and I'm excited for this class!";
          review.student.favoriteClimb = "Castle Peak";
          review.student.goalClimb = "Beckey Route on Liberty Bell";
          review.student.funFact = "I'm afraid of bears.";
          review.student.email = "johnny@somewhere.com";
          review.student.phone = 1234567890;
          review.student.streetAddress = "123 Lane St";
          review.student.city = "Seattle";
          review.student.state = "WA";
          review.student.zip = 98122;
          review.student.insuranceCarrier = "BlueCross";
          review.student.emergencyContact = "Mommy";
          review.student.emergencyContactPhone = 1234567890;
          review.instructor = ;
          review.time = "2019-07-08 01:41:50+00:00";
          review.outing = new BrcApi.Outing();
          review.outing.id = 1;
          review.outing.title = "Leavenworth Outing";
          review.outing.location = "Leavenworth, WA";
          review.outing.startDate = "2019-07-08 01:41:50+00:00";
          review.outing.endDate = "2019-07-08 01:41:50+00:00";
          review.outing.objectives = "Learn some new things";
          review.outing.description = "Let's do some climbing and also learn things.";
          review.outing.itinerary = "8am: Meet up, 9am: climb";
          review.outing.campground = "State Park Campground";
          review.outing.campsite = "group site, site 5";
          review.outing.campingLocation = "maps.google.com";
          review.outing.campingCheckin = "2019-07-08 01:41:50+00:00";
          review.knots = 2;
          review.belay = 2;
          review.rappel = 2;
          review.systems = 2;
          review.anchorSafety = 2;
          review.gearPlacement = 2;
          review.anchorBuilding = 2;
          review.safety = 2;
          review.efficiency = 2;
          review.gearCleaning = 2;
          review.technique = 2;
          review.routefinding = 2;
          review.areas = "Bob's Wall";
          review.currentComfortGrade = "5.9";
          review.currentLimitGrade = "5.9";
          review.recommendation = "5.9 multipitch";
          review.comments = "Here are some comments about how this student did.";
          review.squamish2Transitions = 2;
          review.squamish2Communication = 2;

          instance.reviewsSquamish2IdPut(id, review, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('reviewsSquamish2Post', function() {
        it('should call reviewsSquamish2Post successfully', function(done) {
          // TODO: uncomment, update parameter values for reviewsSquamish2Post call
          /*
          var review = new BrcApi.Squamish2Review();
          review.student = new BrcApi.Student();
          review.student.id = 1;
          review.student.lastName = "Smith";
          review.student.firstName = "Jonathan";
          review.student.nickname = "Johnny";
          review.student.pronouns = "He/him";
          review.student.aboutMe = "Hi, I'm Johnny. I like climbing and I'm excited for this class!";
          review.student.favoriteClimb = "Castle Peak";
          review.student.goalClimb = "Beckey Route on Liberty Bell";
          review.student.funFact = "I'm afraid of bears.";
          review.student.email = "johnny@somewhere.com";
          review.student.phone = 1234567890;
          review.student.streetAddress = "123 Lane St";
          review.student.city = "Seattle";
          review.student.state = "WA";
          review.student.zip = 98122;
          review.student.insuranceCarrier = "BlueCross";
          review.student.emergencyContact = "Mommy";
          review.student.emergencyContactPhone = 1234567890;
          review.instructor = ;
          review.time = "2019-07-08 01:41:50+00:00";
          review.outing = new BrcApi.Outing();
          review.outing.id = 1;
          review.outing.title = "Leavenworth Outing";
          review.outing.location = "Leavenworth, WA";
          review.outing.startDate = "2019-07-08 01:41:50+00:00";
          review.outing.endDate = "2019-07-08 01:41:50+00:00";
          review.outing.objectives = "Learn some new things";
          review.outing.description = "Let's do some climbing and also learn things.";
          review.outing.itinerary = "8am: Meet up, 9am: climb";
          review.outing.campground = "State Park Campground";
          review.outing.campsite = "group site, site 5";
          review.outing.campingLocation = "maps.google.com";
          review.outing.campingCheckin = "2019-07-08 01:41:50+00:00";
          review.knots = 2;
          review.belay = 2;
          review.rappel = 2;
          review.systems = 2;
          review.anchorSafety = 2;
          review.gearPlacement = 2;
          review.anchorBuilding = 2;
          review.safety = 2;
          review.efficiency = 2;
          review.gearCleaning = 2;
          review.technique = 2;
          review.routefinding = 2;
          review.areas = "Bob's Wall";
          review.currentComfortGrade = "5.9";
          review.currentLimitGrade = "5.9";
          review.recommendation = "5.9 multipitch";
          review.comments = "Here are some comments about how this student did.";
          review.squamish2Transitions = 2;
          review.squamish2Communication = 2;

          instance.reviewsSquamish2Post(review, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('studentsGet', function() {
        it('should call studentsGet successfully', function(done) {
          // TODO: uncomment, update parameter values for studentsGet call and complete the assertions
          /*
          var opts = {};
          opts.lastName = "lastName_example";
          opts.firstName = "firstName_example";

          instance.studentsGet(opts, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            let dataCtr = data;
            expect(dataCtr).to.be.an(Array);
            expect(dataCtr).to.not.be.empty();
            for (let p in dataCtr) {
              let data = dataCtr[p];
              expect(data).to.be.a(BrcApi.Student);
              expect(data.id).to.be.a('number');
              expect(data.id).to.be(1);
              expect(data.lastName).to.be.a('string');
              expect(data.lastName).to.be("Smith");
              expect(data.firstName).to.be.a('string');
              expect(data.firstName).to.be("Jonathan");
              expect(data.nickname).to.be.a('string');
              expect(data.nickname).to.be("Johnny");
              expect(data.pronouns).to.be.a('string');
              expect(data.pronouns).to.be("He/him");
              expect(data.aboutMe).to.be.a('string');
              expect(data.aboutMe).to.be("Hi, I'm Johnny. I like climbing and I'm excited for this class!");
              expect(data.favoriteClimb).to.be.a('string');
              expect(data.favoriteClimb).to.be("Castle Peak");
              expect(data.goalClimb).to.be.a('string');
              expect(data.goalClimb).to.be("Beckey Route on Liberty Bell");
              expect(data.funFact).to.be.a('string');
              expect(data.funFact).to.be("I'm afraid of bears.");
              expect(data.email).to.be.a('string');
              expect(data.email).to.be("johnny@somewhere.com");
              expect(data.phone).to.be.a('number');
              expect(data.phone).to.be(1234567890);
              expect(data.streetAddress).to.be.a('string');
              expect(data.streetAddress).to.be("123 Lane St");
              expect(data.city).to.be.a('string');
              expect(data.city).to.be("Seattle");
              expect(data.state).to.be.a('string');
              expect(data.state).to.be("WA");
              expect(data.zip).to.be.a('number');
              expect(data.zip).to.be(98122);
              expect(data.insuranceCarrier).to.be.a('string');
              expect(data.insuranceCarrier).to.be("BlueCross");
              expect(data.emergencyContact).to.be.a('string');
              expect(data.emergencyContact).to.be("Mommy");
              expect(data.emergencyContactPhone).to.be.a('number');
              expect(data.emergencyContactPhone).to.be(1234567890);
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('studentsIdGet', function() {
        it('should call studentsIdGet successfully', function(done) {
          // TODO: uncomment, update parameter values for studentsIdGet call and complete the assertions
          /*
          var id = 56;

          instance.studentsIdGet(id, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(Object);
            // expect(data).to.be(null);

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('studentsIdPut', function() {
        it('should call studentsIdPut successfully', function(done) {
          // TODO: uncomment, update parameter values for studentsIdPut call
          /*
          var id = 56;
          var student = new BrcApi.Student();
          student.id = 1;
          student.lastName = "Smith";
          student.firstName = "Jonathan";
          student.nickname = "Johnny";
          student.pronouns = "He/him";
          student.aboutMe = "Hi, I'm Johnny. I like climbing and I'm excited for this class!";
          student.favoriteClimb = "Castle Peak";
          student.goalClimb = "Beckey Route on Liberty Bell";
          student.funFact = "I'm afraid of bears.";
          student.email = "johnny@somewhere.com";
          student.phone = 1234567890;
          student.streetAddress = "123 Lane St";
          student.city = "Seattle";
          student.state = "WA";
          student.zip = 98122;
          student.insuranceCarrier = "BlueCross";
          student.emergencyContact = "Mommy";
          student.emergencyContactPhone = 1234567890;

          instance.studentsIdPut(id, student, function(error, data, response) {
            if (error) {
              done(error);
              return;
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
